[{"slug":"index","title":"Elegant and Powerful Static Site Generator","content":"Elegant and Powerful Static Site Generator\n\n     -->\n    \n    \n      \n    \n      \n\n\u26a0 Beta Software Warning\nHeads up! HydePHP is still new and currently in beta. Please report any bugs and issues in the appropriate issue tracker. Versions in the 0.x series might not be stable and may change at any time. No backwards compatibility guarantees are made and there will be breaking changes without notice.\n\nPlease wait until v1.0 for production use and remember to back up your source files before updating (use Git!). See https:\/\/hydephp.com\/docs\/master\/updating-hyde for the upgrade guide.\n\nAbout HydePHP\n\nHydePHP is a new Static Site Builder focused on writing content, not markup. With Hyde, it is easy to create static websites, blogs, and documentation pages using Markdown and (optionally) Blade.\n\nHyde is different from other static site builders. It's blazingly fast and seriously simple to get started with, yet it has the full power of Laravel when you need it.\n\nHyde makes creating websites easy and fun by taking care of the boring stuff, like routing, writing boilerplate, and endless configuration. Instead, when you create a new Hyde project, everything you need to get started is already there -- including precompiled TailwindCSS, well crafted Blade templates, and easy asset management.\n\nHyde is powered by Laravel Zero which is a stripped-down version of the robust Laravel Framework. Using Blade templates the site is intelligently compiled into static HTML.\n\nHyde was inspired by JekyllRB and is created for Developers who are comfortable writing posts in Markdown. It requires virtually no configuration out of the box as it favours convention over configuration and is preconfigured with sensible defaults.\n\nInstallation\n\nThe recommended method of installation is using Composer.\n\ncomposer create-project hyde\/hyde --stability=dev\n\nFor the best experience you should have PHP >= 8.0, Composer, and NPM installed.\n\nTo learn more, head over to the quickstart page.","destination":""},{"slug":"advanced-features","title":"Advanced Features in HydePHP","content":"Advanced Features in HydePHP\n\nPreface\n\nHydePHP is a simple, yet powerful, static site generator. It is designed to be easy to use and easy to extend.\n\nThis section of the documentation will cover some of the more advanced (but optional) features of the framework.\n\nIntroduction\n\nTo fully understand the features described in these chapters, it may be beneficial to first skim through the Architecture Concepts chapters.","destination":"advanced-features"},{"slug":"build-tasks","title":"Custom Build Tasks","content":"Custom Build Tasks\n\nIntroduction\n\nThe Build Task API offers a simple way to hook into the build process.\nThe build tasks are very powerful and allow for limitless customizability.\n\nThe built-in Hyde features like sitemap generation and RSS feeds are created using tasks like these.\nMaybe you want to create your own, to for example upload the site to FTP or copy the files to a public directory?\nYou can also overload the built-in tasks to customize them to your needs.\n\nGood to know before you start\n\nTypes of tasks\n\nThere are two types, PreBuildTasks and PostBuildTasks. As the names suggest, PreBuildTasks are executed before the site is built, and PostBuildTasks are executed after the site is built.\n\nTo choose which type of task you want to create, you extend either the PreBuildTask or PostBuildTask class.\nBoth of these have the exact same helpers and API available, so the only difference between them is when they are executed. The classes are otherwise identical.\n\nAbout these examples\n\nFor most of these examples we will focus on the PostBuildTasks as they are the most common.\n\nFor all these examples we assume you put the file in the App\/Actions directory, but you can put them anywhere.\n\nInteracting with output\n\nIn a way, build tasks are like micro-commands, as they can interact directly with the build commands I\/O. Please take a look at the Laravel Console Documentation for the full list of available methods.\n\nIn addition, there are some extra helpers available in the base BuildTask class that allow you to fluently format output to the console, which you will see in the examples below.\n\nCreating build tasks\n\nMinimal example\n\nHere is a minimal example to give you an idea of what we are working with.\n\nclass SimpleBuildTask extends PostBuildTask\n{\n    public function handle(): void\n    {\n        \/\/\n    }\n}\n\nAs you can see, at their core, build tasks are simple classes containing a handle() method,\nwhich as I'm sure you have guessed, is the method that is executed when the task is run by the build command.\n\nIf you want the task to run before the build, you would extend the PreBuildTask class instead.\n\nAutomatic output\n\nWhen running the build command, you will see the following output added after the build is complete.\n\n Generic build task... Done in 0.26ms\n\nAs you can see, some extra output including execution time tracking is added for us. We can of course customize all of this if we want, as you will learn a bit further down.\n\nFull example\n\nHere is a full example, with all the namespaces included, as well as the most common fluent output helpers.\n\ninfo('Hello World!');\n    }\n\n    public function printFinishMessage(): void\n    {\n\t\t$this->line('Goodbye World!');\n    }\n}\n\nYou can see a full API reference further below. But in short, the $message property is the message that runs before the task is executed, and the printFinishMessage() method is the message that runs after the task is executed.\n\nRunning this task will produce the following output:\n\n$ php hyde build\n  Say hello... Hello World!\n  Goodbye World!\n\nAs you can see, there is no execution time tracking here, since we overrode the printFinishMessage() method that normally prints this. You can of course call the withExecutionTime() method to add this back in. See more in the API reference below.\n\nRegistering the tasks\n\nThere are a few ways to register these tasks so Hyde can find them.\n\nThey are shown here in order of presumed convenience, but you are free to choose whichever you prefer. The latter options are more suited for extension developers.\n\nAutodiscovery registration\n\nThe easiest way to register build tasks, is to not do it. Just let Hyde do it for you!\n\nAny classes that end in BuildTask.php that are stored in app\/Actions  will be autoloaded and registered to run automatically.\n\nFor example: app\/Actions\/ExampleBuildTask.php.\n\nConfig file registration\n\nIf you want, you can also register build tasks of any namespace in the convenient build_tasks array which is in the main configuration file, config\/hyde.php.\n\n\/\/ filepath config\/hyde.php\n'build_tasks' => [\n    \\App\\Actions\\SimpleTask::class,\n    \\MyPackage\\Tasks\\MyBuildTask::class,\n],\n\nProgrammatic registration\n\ninfo This option assumes you are familiar with Laravel's service container and service providers.\n\nIf you are developing an extension, you can either instruct users register your tasks with the config option above,\nor you can register the extensions programmatically, I recommend you do this in the boot method of a service provider.\n\nThe build tasks are registered in an internal array of the BuildService class, which is bound as a singleton in the underlying Laravel service container.\nTo actually register your task, provide the fully qualified class name of the task to the BuildTaskService::registerTask() method.\n\nHere is an example of how to do this using in a service provider. Though you could technically do it anywhere using the app() helper, just as long as it's done early enough in the application lifecycle so it's registered before the build command is executed.\n\nclass MyServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        $this->app->make(\\Hyde\\Framework\\Services\\BuildTaskService::class)\n            ->registerTask(\\MyPackage\\Tasks\\MyBuildTask::class);\n    }\n}","destination":"build-tasks"},{"slug":"architecture-concepts","title":"Advanced Architecture Concepts","content":"Advanced Architecture Concepts\n\nIntroduction\n\nThese chapters are written for power users and contributors. If you're just looking to get a site up and running,\nyou can safely skip this section. The documentation here will cover advanced topics under the presumption that\nthe reader has a basic to intermediate understanding of programming, as well as PHP and to some extent Laravel.\n\nYou, of course, are free to skip this entire section, as you don't need to know these things to use Hyde.\nHowever, if you want to know the \"magic\" behind Hyde, or if you want to take advantage of these powerful tools,\nthen by all means, please read on! This is also a great place to start if you want to contribute to the source code.\n\ninfo For a high-level overview of these concepts, see the Basic Architecture Concepts page.\n\nBehind the magic\n\nWant to learn more about a particular feature? Click on the links below to visit the article.\n\n[\/\/]: # (This would be better suited for a component, but it's a fun experiment for now)\n[Blade]: @foreach(glob(\\Hyde\\Hyde::path('docs\/architecture-concepts\/*.md')) as $file)   {{ Hyde::makeTitle(basename($file, '.md')) }}   @endforeach","destination":"architecture-concepts"},{"slug":"autodiscovery","title":"Autodiscovery","content":"Autodiscovery\n\nIntroduction\n\nHydePHP aims to reduce the amount of configuration you need to do to get a site up and running.\nTo that end, Hyde uses a process called autodiscovery to automatically find and register your pages.\n\nThis article will go into detail about how autodiscovery works as well as the lifecycle of a site build.\n\nThe short version\n\nHyde will use the information in the page model classes to scan the source directories for matching files which are\nparsed using instructions from the model's class, resulting in data used to construct objects that get stored in the HydeKernel.\n\nPrerequisites\n\nBefore reading this article, you should be familiar with the following concepts:\n-  Page Models\n\nThe HydeKernel\n\nIn the centre, or should I say core, of HydePHP is the HydeKernel. The kernel encapsulates a HydePHP project and\nprovides helpful methods for interacting with it. You can think of it as the heart of HydePHP, if you're a romantic.\n\nThe HydeKernel is so important that you have probably used it already. The main entry point for the HydePHP\nAPI is the Hyde facade, which calls methods on the kernel.\n\nuse Hyde\\Hyde;\nuse Hyde\\Foundation\\HydeKernel;\n\nHyde::version() === app(HydeKernel::class)->version();\n\nThe kernel is created very early on in the application lifecycle, in the bootstrap.php file, where it is also bound\nas a singleton into the application service container.\n\nAt this point you might be wondering why we're talking about the kernel when this article is about autodiscovery.\nWell, as you'll see in just a moment, the kernel is responsible for initiating the autodiscovery process.\nThe kernel is also where the discovered data is stored in memory, so it's important to understand how it works.\n\nThe kernel lifecycle\n\nNow that we know the role of the HydeKernel, let's take a look at its lifecycle. The kernel is \"lazy-booted\", meaning\nthat the all the heavy lifting only happens when you actually need it. Once booted, the kernel data will stay in memory\nuntil the console application is terminated.\n\nThe kernel data is primarily stored in three collections that get generated during the kernel's boot process.\nLet's take a look at a simplified version of the kernel's boot method to see how this works.\n\npublic function boot(): void\n{\n    $this->booted = true;\n\n    $this->files = FileCollection::boot($this);\n    $this->pages = PageCollection::boot($this);\n    $this->routes = RouteCollection::boot($this);\n}\n\nHere you'll see that we boot the three collections. This is where all the autodiscovery magic happens!\n\nDeep dive into lazy-booting\n\nIf you're curious about how the kernel is lazy-booted, here's how it works!\nFeel free to skip this section if this doesn't interest you.\n\n\/\/ This will boot the kernel if it hasn't been booted yet\nprotected function needsToBeBooted(): void\n{\n    if (! $this->booted) {\n        $this->boot();\n    }\n}\n\n\/\/ And here's an example of how it's used\npublic function pages(): PageCollection\n{\n    $this->needsToBeBooted();\n\n    return $this->pages;\n}\n\nYeah, it's really unglamorous I know. But it works! Having it like this will ensure that any time you call Hyde::pages(),\nthat underlying collection will always have been booted and be ready to use.","destination":"autodiscovery"},{"slug":"automatic-routing","title":"Automatic Routing","content":"","destination":"automatic-routing"},{"slug":"dynamic-data-discovery","title":"Dynamic Data Discovery","content":"Dynamic Data Discovery\n\n[\/\/]: # (Adds a pseudo-subtitle)\nAKA: Front Matter & Filling in the Gaps\n\nIntroduction\n\nHyde wants to allow developers to write less, and do more. This is also a major difference between HydePHP and JekyllRB.\nJekyll will only do what you tell it to do. Hyde, on the other hand, will try to do what you want it to do.\n\nAs with all other chapters in this category, you don't need to know about this to use Hyde -- that's the whole point!\nHowever, if you're anything like me, you'll likely find this interesting to read about, even if you don't really need to know it.\n\nHyde makes great use of front matter in both Markdown and Blade files (it's true!). However, it can quickly get tedious\nand quite frankly plain boring to have to write a bunch of front matter all the time. As Hyde wants you to focus on\nyour content, and not your markup, front matter is optional and Hyde will try to fill in the gaps for you.\n\nIf you're not happy with Hyde's generated data you can always override it by adding front matter to your files.\n\nHow it Works\n\nNow, to the fun part: getting into the nitty-gritty details of how Hyde does this!\n\nTo make things simple the dynamic data is created in a special stage where the page object is being created.\nIf you have not yet read the page models chapter you might want to do so now.\nYou might also want to read about the autodiscovery lifecycle for some context as to when this happens.\n\nThe factory pipeline, in short\n\nAfter basic information about the page has been gathered, such as the source file information and the front matter,\nthe page model is run through a series of factories. These are just classes that work around the limited data\nthat is available at this point, and will assign the rich data needed to make your Hyde page awesome.\n\nThere are a few factory classes. The one we will be looking at here is the HydePageDataFactory class, which is\nresponsible for data applicable to all page models. Complex structures and data only relevant to some page types\nhave their own factories, making the code more modular and maintainable.\n\nIn-depth overview of a page factory\n\nLet's take a look at how Hyde will discover the title of a page as an example. Since this is something used by all pages,\nthis discovery is done in the HydePageDataFactory class.\n\nFactory data input\n\nThe factory gets one input, a CoreDataObject class. Think of this like a DTO (Data Transfer Object) that holds\nimmutable data known from the start of the page construction process. It also has all the information needed\nto identify the page and its source file. Here's a simplified version of the class:\n\nclass CoreDataObject\n{\n    public readonly FrontMatter $matter;\n    public readonly Markdown|false $markdown;\n\n    public readonly string $pageClass;\n    public readonly string $identifier;\n    public readonly string $sourcePath;\n    public readonly string $outputPath;\n    public readonly string $routeKey;\n}\n\nProcessing the known data\n\nNow that we have the input we pass it to the factory, where a simple algorithm is used to find the best title for the page.\n\nprivate function findTitleForPage(): string\n{\n    return $this->matter('title')\n        ?? $this->findTitleFromMarkdownHeadings()\n        ?? Hyde::makeTitle(basename($this->identifier));\n}\n\nAs you can see, we are using the null coalescing operator (??) to return the first non-null value. We always want the\nuser to be able to set any data explicitly, so we first check the front matter in all factory methods.\n\nIf no title is set in the matter the method will return null, and Hyde will try the next step which is to search the headings.\nIf that fails, the last step will generate a title from the file name. This ensures that no matter what, we always have a title.\n\nInjecting the data into the page\n\nOnce the data has been discovered, it is injected into the page object. This is rather unglamorous but is mentioned\nhere for completeness. It's pretty simple. The factory will always return an array of the computed data, where the keys\nalways match the property names on the page object, so we just need to loop over the array and set the properties.\n\nforeach ($data->toArray() as $key => $value) {\n    $this->{$key} = $value;\n}\n\nAnd that's pretty much it! Hyde will do this for all the data it can discover, all so that you can focus on your content.","destination":"dynamic-data-discovery"},{"slug":"page-models","title":"Page models","content":"The Hyde Page Models\n\nIntroduction\n\nThe Hyde page models are an integral part of how HydePHP creates your static site. Each page in your site is represented\nby a page model. These are simply PHP classes that in addition to holding both the source content and computed data\nfor your pages, also house instructions to Hyde on how to parse, process, and render the pages to static HTML.\n\nIn this article, you'll get a high-level overview of the page models, and some code examples to give you a look inside.\n\nThe short version\n\nPage models are classes that have two primary concerns:\n\n1. They act as blueprints containing static instructions for how to parse, process, and, render pages.\n2. Each class instance also holds the page source contents, as well as the computed data.\n\nOther key points:\n\n- HydePHP, at the time of writing, comes with five different page classes, one for each supported type.\n- You don't construct page models yourself. HydePHP does it for you by the autodiscovery process.\n- Page models are just PHP classes. You can extend them, and you can implement your own.\n\nThe Page Model\n\nTo give you an idea of what a page model class looks like, here's a simplified version of the base MarkdownPost class,\nDon't worry if you don't understand everything yet, we'll talk more about these parts later.\n\nclass MarkdownPost extends BaseMarkdownPage\n{\n    public static string $sourceDirectory = '_posts';\n    public static string $outputDirectory = 'posts';\n    public static string $fileExtension = '.md';\n    public static string $template = 'post';\n\n    public string $identifier;\n    public string $routeKey;\n    public string $title;\n\n    public FrontMatter $matter;\n    public Markdown $markdown;\n}\n\n_Note that since Hyde pages are modular and class inheritance and traits, this example has been simplified and\nedited to show all the relevant parts inlined into one class._\n\nPage Models as Blueprints\n\nAll page models have some static properties (that is, they belong to the class, not the instance) that are used as\nblueprints, defining information for Hyde to know how to parse a file, and what data around it should be generated.\n\nLet's again take the simplified MarkdownPost class as an example, this time only showing the static properties:\n\nclass MarkdownPost extends BaseMarkdownPage\n{\n    public static string $sourceDirectory = '_posts';\n    public static string $outputDirectory = 'posts';\n    public static string $fileExtension = '.md';\n    public static string $template = 'post';\n}\n\nWhat each property does\n\nThe properties should be self-explanatory, but here's a quick rundown to give some context on how they are used,\nand how the paths relate to each other. So for the class above, Hyde will thanks to this blueprint, know to:\n* Look for files in the _posts directory, with the .md extension\n* Compile the page using the post Blade template\n* Output the compiled page to the _site\/posts directory\n\nPage Models as Data Containers\n\nAs mentioned above, each page model instance also holds the page source contents, as well as the computed data.\n\nLet's again take the simplified MarkdownPost class as an example, this time only showing the instance properties:\n\nclass MarkdownPost extends BaseMarkdownPage\n{\n    public string $identifier;\n    public string $routeKey;\n    public string $title;\n\n    public FrontMatter $matter;\n    public Markdown $markdown;\n}\n\nThere are some more properties than shown here, for example, various metadata properties, but these are the most common\nand important ones.\n\nWhile the static data gives instructions to Hyde on how to process all pages of the type, the instance data tells Hyde\nhow to process a specific page. For example, the identifier property is used to uniquely identify the page, and\nthe routeKey property is used to generate the URL for the page.\n\nThe matter and markdown properties as I'm sure you can guess, hold the page's front matter and markdown content.\nThese can then also be processed by page factories to generate the computed data like the\ntitle property.","destination":"page-models"},{"slug":"blog-posts","title":"Creating Blog Posts","content":"Creating Blog Posts\n\nIntroduction to Hyde Posts\n\nMaking blog posts with Hyde is easy. At the most basic level,\nall you need is to add a Markdown file to your _posts folder.\n\nTo use the full power of the Hyde post module however,\nyou'll want to add YAML Front Matter to your posts.\n\nYou can scaffold posts with automatic front matter using the HydeCLI:\nphp hyde make:post\nLearn more about scaffolding posts, and other files, in the console commands documentation.\n\nShort Video Tutorial\n\nBest Practices and Hyde Expectations\n\nSince Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results.\n\nFilenames\n\n- Markdown post files are stored in the _posts directory\n- The filename is used as the filename for the compiled HTML\n- Filenames should use kebab-case-slug followed by the extension .md\n- Files prefixed with _underscores are ignored by Hyde\n- Your post will be stored in _site\/posts\/.html\n\nExample:\n\u2714 posts\/hello-world.md # Valid and will be compiled to site\/posts\/hello-world.html\n\nFront Matter\n\nFront matter is optional, but highly recommended for blog posts.\n\nYou can read more about the Front Matter format in the Front Matter documentation.\nHere is a quick primer:\n\n- Front matter is stored in a block of YAML that starts and ends with a --- line.\n- The front matter should be the very first thing in the Markdown file.\n- Each key-pair value should be on its own line.\n- The front matter is used to construct dynamic HTML markup for the post as well as meta tags and post feeds.\n  You are encouraged to look at the compiled HTML to learn and understand how your front matter is used.\n\nExample:\ntitle: \"My New Post\"\nMarkdown comes here\n\nYou can use the php hyde make:post command to automatically generate the front matter based on your input.\n\nA first look at Front Matter\n\nBefore digging in deeper on all the supported front matter options,\nlet's take a look at what a basic post with front matter looks like.\n\nThis file was created using the make:post by hitting the Enter key to use\nall the defaults (with some extra lorem ipsum to illustrate).\n\ntitle: My New Post\ndescription: A short description used in previews and SEO\ncategory: blog\nauthor: Mr. Hyde\ndate: 2022-05-09 18:38\nWrite your Markdown here\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit.\nAutem aliquid alias explicabo consequatur similique,\nanimi distinctio earum ducimus minus, magnam.\n\nHow the Front Matter is used\n\nThe front matter is used to construct dynamic HTML markup for the post as well as meta tags and post feeds.\n\nYou are encouraged to look at the compiled HTML to learn and understand how your front matter is used.\n\nFront matter syntax\n\nHere is a quick reference of the syntax Hyde uses and expects:\n\nkey: value\nstring: \"quoted string\"\nboolean: true\ninteger: 100\narray:\n  key: value\n  key: value\n\nSupported Front Matter properties\n\nPost Front Matter Schema\n\nHere is a quick reference of the supported front matter properties.\nKeep on reading to see further explanations, details, and examples.\n\nKEY NAME   VALUE TYPE EXAMPLE \/ FORMAT\n\ntitle        string         \"My New Post\"\ndescription  string         \"A short description\"\ncategory     string         \"my favorite recipes\"\ndate         string         \"YYYY-MM-DD [HH:MM]\"\nauthor       string\/array   See author section\nimage        string\/array   See image section\n\nNote that YAML here is pretty forgiving. In most cases you do not need to wrap strings\nin quotes, but it can help in certain edge cases, thus they are included here.\n\nIn the examples below, when there are multiple keys, they signify various ways to use the parameter.\n\nTitle\n\ntitle: \"My New Post\"\n\nDescription\n\ndescription: \"A short description used in previews and SEO\"\n\nCategory\n\ncategory: blog\ncategory: \"My favorite recipes\"\n\nDate\n\ndate: \"2022-01-01 12:00\"\ndate: \"2022-01-01\"\n\nAuthor\n\nauthor: \"Mr. Hyde\" # Arbitrary name displayed \"as is\"\nauthor: mr_hyde # Username defined in authors config\nauthor: # Array of author data\n    name: \"Mr. Hyde\"\n    username: mr_hyde\n    website: https:\/\/twitter.com\/HydeFramework\n\nWhen specifying an array you don't need all the sub-properties.\nThe example just shows all the supported values. Array values here\nwill override all the values in the authors config entry.\n\nImage\n\nimage: image.jpg # Expanded by Hyde to _media\/image.jpg and is resolved automatically to the correct URL for the built site\nimage: https:\/\/cdn.example.com\/image.jpg # Full URL starting with http(s):\/\/) or \/\/ (protocol-relative)\nimage:\n    source: image.jpg # Same as above\n    source: https:\/\/cdn.example.com\/image.jpg # Same as above\n    altText: \"Alt text for image\"\n    title: \"Tooltip title\"\n    copyright: \"Copyright (c) 2022\"\n    licenseName: \"CC-BY-SA-4.0\"\n    licenseUrl: https:\/\/example.com\/license\/\n    authorUrl: https:\/\/photographer.example.com\/\n    authorName: \"John Doe\"\n\nWhen supplying an image source with a local image path, the image is expected to be stored in the _media\/ directory.\nLike all other media files, it will be copied to _site\/media\/ when the site is built, so Hyde will resolve links accordingly.\n\nWhen supplying an image with a full URL, the image source will be used as-is, and no additional processing is done.\n\nThe image will be used as the cover image, and any array data is constructed into a dynamic fluent caption,\nand injected into post and page metadata.\n\nSee posts\/introducing-images\nfor a detailed blog post with examples and schema information!\n{ .info }\n\nUsing images in posts\n\nTo use images stored in the _media\/ directory, you can use the following syntax:\n\nImage Alt # Note the relative path since the blog post is compiled to posts\/example.html\n\nTo learn more, check out the chapter in managing assets","destination":"blog-posts"},{"slug":"compile-and-deploy","title":"Compile and Deploy your site","content":"Compile and Deploy your site\n\nRunning the build command\n\nCompile the entire site to static HTML\nNow that you have some amazing content, you'll want to compile your site into static HTML.\n\nThis is as easy as executing the build command:\nphp hyde build\n\nOther ways to compile the site\n\nYou can also compile a single file:\nphp hyde rebuild \n\nAnd, you can even start a development server to compile your site on the fly:\nphp hyde serve\n\nFurther reading\n\nLearn more about these commands in the console commands documentation:\n\n- Build command\n- Rebuild command\n- Serve command\n\nKey Concept: Autodiscovery\nWhen building the site, Hyde will your source directories for files and compile them into static HTML using the appropriate layout depending on what kind of page it is. You don't have to worry about routing as Hyde takes care of that, including creating navigation menus!\n\nDeploying your site\n\nOne of the things that make static sites so enjoyable to work with is how easy it is to deploy them to the web.\nThis list is not exhaustive, but gives you a general idea of the most common ways to deploy your site.\nIf you have ideas to add to the documentation, please send a pull request!\n\nGeneral deployment\n\nIn essence, all you need to do is copy the contents of the _site directory to a web server and you're done.\n\nOnce the site is compiled there is nothing to configure or worry about.\n\nFTP and File Managers\n\nIf you have a conventional web host, you can use FTP\/SFTP\/FTPS to upload your site to the web server.\nSome web hosting services also have web based file managers.\n\nTo deploy your site using any of these methods, all you need to do is upload the entire contents\nof your site directory to the web server, usually in the publichtml, htdocs, or www directory.\n\nGitHub Pages - Manually\n\nGitHub Pages is a free service that allows you to host your static site on the web.\n\nIn general, push the entire contents of your _site directory to the gh-pages branch of your repository,\nor the docs\/ directory on your main branch, depending on how you set it up.\n\nPlease see the GitHub Pages documentation for more information.\n\nGitHub Pages - CI\/CD\n\nHyde works amazing with GitHub Pages and GitHub Actions and the entire build and deploy process can be automated.\n\n- We have a great blog post on how to do this, Automate HydePHP sites using GitHub Actions and GitHub Pages.\n\n- You can also copy our sample GitHub Actions Workflow.yml file.\n\nBy the way, HydePHP.com is hosted on GitHub Pages, and the site is compiled in a GitHub Action workflow that compiles and\ndeploys the site automatically when the source is updated using this GitHub workflow.","destination":"compile-and-deploy"},{"slug":"documentation-pages","title":"Creating Documentation Pages","content":"Creating Documentation Pages\n\nIntroduction to Hyde Documentation Pages\n\nHyde makes it easier than ever to create documentation sites.\nBy the way, this documentation site is of course made with the Hyde Documentation module!\n\nIn short, all you need to do is put standard Markdown files in the _docs\/ directory and Hyde will do the rest.\n\nWhat is \"the rest\", you may ask? Well, for starters:\n\n- Hyde compiles your Markdown content into a beautiful static HTML page based on the Lagrafo frontend\n- A sidebar (which is responsive) is automatically created based on your Markdown files\n    - If you have an index.md in the _docs\/ directory, it will be used as the sidebar header\n    - You can even customize the order and labels of sidebar items\n- If you have an index.md in the _docs\/ directory,\n  a link to it will be added to the site navigation menu named \"Docs\".\n- If you have a Torchlight API token in your .env file, Hyde will even automatically enable Syntax Highlighting for you.\n  See more about this in the extensions page.\n\nBest Practices and Hyde Expectations\n\nSince Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results.\n\nFilenames\n\n- Hyde Documentation pages are files are stored in the _docs directory\n- The filename is used as the filename for the compiled HTML\n- Filenames should use kebab-case-slug format, followed by the appropriate extension\n- Files prefixed with _underscores are ignored by Hyde\n- You should always have an index.md file in the _docs\/ directory\n- Your page will be stored in _site\/docs\/.html unless you change it in the config\n\nAdvanced usage and customization\n\nLike most of HydePHP, the Hyde Documentation module is highly customizable. Much of the frontend is composed using Blade templates and components, which you can customize to your heart's content.\nSince there are so many components, it's hard to list them all here in the documentation, so I encourage you to check out the source code to see how it's all put together and find the customizations you are looking for.\n\nCreating Documentation Pages\nYou can create a Documentation page by adding a file to the _docs directory where the filename ends in .md.\n\nYou can also scaffold one quickly by using the HydeCLI.\n\nphp hyde make:page \"Page Title\" --type=\"docs\"\n\nThis will create the following file saved as _docs\/page-title.md\n\nPage Title\n\nFront Matter is optional\n\nYou don't need to use front matter to create a documentation page.\n\nHowever, Hyde still supports front matter here as it allows you to quickly override the default values.\n\nHere is a quick reference, however, you should take a look at the dynamic content section to learn more.\n\ntitle: \"Page Title\"\nnavigation:\n    label: \"Sidebar Label\"\n    hidden: true\n    priority: 5\n\nDynamic content generation\n\nHyde makes documentation pages easy to create by automatically generating dynamic content such as the sidebar and page title.\nIf you are not happy with the results you can customize them in the config or with front matter.\n\nBefore we look at how to override things, here is an overview of the relevant content Hyde generates,\nand where the data is from as well as where it can be overridden.\n\nProperty                        Description                                            Source                              Override in\n\ntitle (string)                The title of the page used in the HTML ` tag   The first H1 heading (# Foo`)      Front matter\nnavigation.label (string)     The label for the page shown in the sidebar            The page identifier\/basename (slug) Front matter, config\nnavigation.hidden (boolean)   Hides the page from the sidebar                        null                              Front matter, config\nnavigation.priority (integer) The priority of the page used for ordering the sidebar Defaults to 999                     Front matter, config\n\nSidebar\n\nThe sidebar is automatically generated from the files in the _docs directory. You will probably want to change the order\nof these items. You can do this in two ways, either in the config or with front matter using the navigation array.\n\nTable of contents\n\nHyde automatically generates a table of contents for the page and adds it to the sidebar.\n\nThe behaviour of this can be changed in the configuration file.\nSee the customization page for more details.\n\nSidebar ordering\n\nThe sidebar is sorted\/ordered by the priority property. The higher the priority the further down in the sidebar it will be.\nThe default priority is 999. You can override the priority using the following front matter:\n\nnavigation:\n    priority: 5\n\nYou can also change the order in the Docs configuration file.\nSee the chapter in the customization page for more details. \nI personally think the config route is easier as it gives an instant overview, however the first way is nice as well.\n\nSidebar labels\n\nThe sidebar items are labeled with the label property. The default label is the filename of the file.\nYou can change it with the following front matter:\n\nnavigation:\n    label: \"My Custom Sidebar Label\"\n\nSidebar grouping\n\nSidebar grouping allows you to group items in the sidebar into categories. This is useful for creating a sidebar with a lot of items.\nThe Hyde docs for instance use this.\n\nThe feature is enabled automatically when one or more of your documentation pages have the navigation.group property set\nin the front matter. This will then switch to a slightly more compact sidebar layout with pages sorted into categories.\nAny pages without the group front matter will get put in the \"Other\" group.\n\nUsing Front Matter\n\nTo enable sidebar grouping, you can add the following front matter to your documentation pages:\n\nnavigation:\n    group: \"Getting Started\"\n\nUsing subdirectories\n\nSince v0.52.0-beta, you can also automatically group your documentation pages by placing source files in sub-directories.\n\nFor example, putting a Markdown file in _docs\/getting-started\/, is equivalent to adding the same front matter in the step above.\n\nNote that when the flattened output paths setting is enabled, the file will still be compiled to the _site\/docs\/ directory like it would be if you didn't use the sub-directories.\n\nHiding items\n\nYou can hide items from the sidebar by adding the hidden property to the front matter:\n\nnavigation:\n    hidden: true\n\nThis can be useful to create redirects or other items that should not be shown in the sidebar.\n\nThe index page is by default not shown as a sidebar item, but instead is linked in the sidebar header. \n\nCustomization\n\nPlease see the customization page for in-depth information on how to customize Hyde,\nincluding the documentation pages. Here is a high level overview for quick reference though.\n\nOutput directory\n\nIf you want to store the compiled documentation pages in a different directory than the default 'docs' directory,\nfor example to specify a version like the Hyde docs does, you can specify the output directory in the Hyde configuration file.\nThe path is relative to the site output, typically _site.\n\n\/\/ filepath: _config\/hyde.php\n'output_directories' => [\n    \\Hyde\\Pages\\DocumentationPage::class => 'docs' \/\/ default\n    \\Hyde\\Pages\\DocumentationPage::class => 'docs\/master' \/\/ What the Hyde docs use\n]\n\nNote that you need to take care as to not set it to something that may conflict with other parts, such as media or posts directories.\n\nAutomatic navigation menu\n\nBy default, a link to the documentation page is added to the navigation menu when an index.md file is found in the _docs directory. Please see the the customization page for more information.\n\nSidebar header name\n\nBy default, the site title shown in the sidebar header is generated from the configured site name suffixed with \"docs\".\nYou can change this in the Docs configuration file.\n\n'title' => 'API Documentation',\n\nTip: The header will link to the docs\/index page, if it exists.\n\nSidebar page order\n\nTo quickly arrange the order of items in the sidebar, you can reorder the page slugs in the list and the links will be sorted in that order.\nLink items without an entry here will have fall back to the default priority of 999, putting them last.\n\n'sidebar_order' => [\n    'readme',\n    'installation',\n    'getting-started',\n]\n\nSee the chapter in the customization page for more details. \n\nTable of contents settings\n\nIn the config\/docs.php file you can configure the behavior, content,\nand the look and feel of the sidebar table of contents.\nYou can also disable the feature completely.\n\n'tableofcontents' => [\n\t'enabled' => true,\n\t'minheadinglevel' => 2,\n\t'maxheadinglevel' => 4,\n\t'smoothpagescrolling' => true,\n],\n\nSearch feature\n\nIntroduction\n\nThe HydeSearch plugin adds a search feature to documentation pages.\n\nThe search feature is enabled by default.\nYou can disable it by removing the documentationSearch from the Hyde Features config array.\n\nUsing the search\n\nThe search works by generating a JSON search index which the JavaScript plugin loads asynchronously.\n\nTwo types of search methods are added, one is a full page search screen that will saved to docs\/search.html.\nThe full page can be disabled by setting createsearchpage to false in the docs config.\nNote that the fullpage search is used as a fallback for browsers that don't support the `` element, and may lead to 404 errors if disabled.\n\nThe second method is a button added to the documentation pages, similar to how Algolia DocSearch works.\nOpening it will open a dialog modal with an integrated search screen.\nYou can also open the dialog using the keyboard shortcut \/.\n\nHiding pages from indexing\n\nIf you have a large page, like a changelog, on your documentation sites you may want to hide it from the search index. You can do this by adding the page slug to the excludefromsearch array in the docs config, similar to how navigation menu items are hidden.\n\n\/\/ filepath: config\/docs.php\n\n'excludefromsearch' => [\n  'changelog',\n]\n\nThe page will still be accessible via the URL, but will be added to the search index JSON file. Don't include the file extension.\n\nAutomatic \"Edit Page\" button\n\nIntroduction\n\nHyde can automatically add links to documentation pages that takes the user\nto a GitHub page (or similar) to edit the page. This makes it great for open-source projects\nlooking to allow others to contribute to the documentation in a quick and easy manner.\n\nThe feature is automatically enabled when you specify a base URL in the Docs configuration file.\nHyde expects this to be a GitHub path, but it will probably work with other methods as well,\nif not, please send a PR and\/or create an issue on the GitHub repository!\n\nExample configuration\n\nLet's take a practical example for how HydePHP.com uses this feature.\n\n\/\/ Filepath: config\/docs.php\n\n'sourcefilelocation_base' => 'https:\/\/github.com\/hydephp\/docs\/blob\/master\/',\n\nChanging the button text\n\nChanging the label is easy, just change the following config setting:\n\n\/\/ Filepath: config\/docs.php\n'editsourcelink_text' => 'Edit Source on GitHub',\n\nChanging the position\n\nBy default the button will be shown in both the documentation page footer.\nYou can change this by setting the following config setting to 'header', 'footer', or 'both'\n\n\/\/ Filepath: config\/docs.php\n'editsourcelink_position' => 'header',\n\nAdding a button icon\n\nThis is not included out of the box, but is easy to add with some CSS!\nJust target the .edit-page-link class.\n\n\/\/ filepath e.g. app.css\n.edit-page-link::before {content: \"\u270f \"}\n\nChanging the Blade view\n\nYou can also publish the edit-source-button.blade.php view and change it to your liking.\n\nUsing flattened output paths\n\nIf this setting is set to true, Hyde will output all documentation pages into the same configured documentation output directory.\nThis means that you can use the automatic directory based grouping feature, but still have a \"flat\" output structure.\nNote that this means that you can't have two documentation pages with the same filename or navigation menu label as they will overwrite each other.\n\nIf you set this to false, Hyde will match the directory structure of the source files (just like all other pages).\n\n\/\/ Filepath: config\/docs.php\n'flattenedoutputpaths' => true,","destination":"documentation-pages"},{"slug":"managing-assets","title":"Managing and Compiling Assets","content":"Managing and Compiling Assets\n\nIntroduction\n\nManaging and compiling assets is a very common task in web development. Unfortunately, it's rarely fun.\n\nWith hyde, you don't have to do it, in fact, you can skip this entire page if you are happy with how it is.\nBut as always with Hyde, you can customize everything if you want to.\n\nHyde ships with a complete frontend using Blade views, TailwindCSS styles, and Alpine.js interactions. Some extra custom styles are made in the HydeFront package, which is pre-installed and bundled in the pre-configured Laravel Mix.\n\nTo get you started quickly, all the styles are already compiled minified into media\/app.css, which will be copied to the site\/media\/app.css directory when you run php hyde build.\n\nSome extra information, and answers to possible questions\n\nDo I have to use NPM to use Hyde?\nNo. NPM is optional as all the compiled styles you need are already installed. You only need NPM if you want to compile your own styles.\n\nWhen do I need to compile assets?\n\nWhen customizing\nIf you want to customize the Tailwind settings or add custom styles, you will need to take care of compiling the styles yourself.\n\nWhen adding new classes\nThe _media\/app.css file that comes with Hyde contains TailwindCSS for all classes that are used in the default Blade views, as well as the HydeFront custom styles.\n\nIf you customize the Blade views and add new classes, or if you add new classes in Blade-based pages, you may need to compile the assets yourself to get the new styles.\n\nIf you stick to using Markdown based pages, you don't need to compile anything.\n\nHow are assets stored and managed?\n\nCurrently, the frontend assets are separated into three places.\n\nThe resources\/assets contains source files, meaning files that will be compiled into something else. Here you will find the app.css file that bootstraps the TailwindCSS styles. This file is also an excellent place to add your custom styles. It is also where we import HydeFront.\n\nThe media folder contains compiled (and usually minified) files. When Hyde compiles your static site, all asset files here will get copied as they are into the site\/media folder.\n\nThe _site\/media folder contains the files that are served to the user.\n\nWhat is the difference between media and site\/media?\nIt may seem weird to have two folders for storing the compiled assets, but it is quite useful.\n\nThe site directory is intended to be excluded from version control while the media folder is included in the version control, though you may choose to exclude the compiled files from the _media folder if you want to.\n\nYou are of course free to modify this behavior by editing the webpack.mix.js file.\n\nHow do I compile assets?\n\nFirst, make sure that you have installed all the NodeJS dependencies using npm install.\nThen run npm run dev to compile the assets. If you want to compile the assets for production, run npm run prod.\nYou can also run npm run watch to watch for changes in the source files and recompile the assets automatically.\n\nHow does it work?\n\nHyde uses Laravel Mix (which is a wrapper for webpack) to compile the assets.\n\nWhen running the npm run dev\/prod command, the following happens:\n\n1. Laravel Mix will compile the resources\/assets\/app.css file into _media\/app.css using PostCSS with TailwindCSS and AutoPrefixer.\n2. Mix then copies the media folder into site\/media, this is so that they are automatically accessible to your site without having to rerun php hyde build, making blend perfectly with the realtime compiler (php hyde serve).\n\nTelling Hyde where to find assets\n\nCustomizing the Blade templates\n\nTo make it really easy to customize asset loading, the styles and scripts are loaded in dedicated Blade components.\n\n- Styles are loaded in hyde::layouts.styles\n- Scripts are loaded in hyde::layouts.scripts\n\nTo customize them, run the following command:\n\nphp hyde publish:views layouts\n\nThen edit the files found in resources\/views\/vendor\/hyde\/layouts directory of your project.\n\nYou might not even need to do anything!\n\nFor the absolute majority of the cases, you don't need to mess with these files. Hyde will automatically load the app.css file when it exists in the _media directory.\n\nLoading from CDN\nIf you want to load the same pre-compiled file included with Hyde but from a CDN, you can set loadappstylesfromcdn to true in the config\/hyde.php file. While you lose the ability to customize it, your styles will be automatically updated when needed, as the installed Framework version will automatically specify the correct version to load.\n\nUsing the TailwindCSS Play CDN\n\nIf you want to use the TailwindCSS Play CDN, you can set useplaycdn to true in the config\/hyde.php file.\nThis will in addition to loading the standard app.css file also add a script tag to load the TailwindCSS Play CDN.\nWhat's even better is that Hyde will also inject the contents of the included tailwind.config.js file into the script tag, so the Play CDN styles match the ones created by Laravel Mix.\nThis also means you can tinker around with the TailwindCSS settings without having to compile anything.\n\nwarn Note that the Play CDN is not meant for production use, so enabling it will add a warning to the web console.\n\nManaging images\nAs mentioned above, assets stored in the media folder are automatically copied to the site\/media folder,\nmaking it the recommended place to store images. You can then easily reference them in your Markdown files.\n\nReferencing images\n\nThe recommended way to reference images are with relative paths as this offers the most compatibility,\nallowing you to browse the site both locally on your filesystem and on the web when serving from a subdirectory.\n\nwarning Note: The path is relative to the compiled file in the site output\n\nThe path to use depends on the location of the page. Note the subtle difference in the path prefix.\n\n- If you are in a Blog Post or Documentation Page, use ..\/media\/image.png\n- If in a Markdown Page or Blade Page, use media\/image.png\n- While not recommended, you can also use absolute paths: \/media\/image.png\n\nMaking images accessible\n\nTo improve accessibility, you should always add an alt text. Here is a full example for an image in a blog post:\n\nImage Alt # Note the relative path\n\nSetting a featured image for blog posts\n\nHyde offers great support for creating data-rich and accessible featured images for blog posts.\n\nYou can read more about this in the creating blog posts page.","destination":"managing-assets"},{"slug":"static-pages","title":"Creating Static Pages","content":"# Creating Static Pages\n\n## Introduction to Hyde Pages\n\nHyde offers two ways to create static pages:\nMarkdown pages which are perfect for simple pages that focuses heavily on the content,\nand Blade pages which are perfect for more complex pages where you want full control over the HTML,\nand where you may want to include other components.\n\nLet's start with the basics.\n\n### Best Practices and Hyde Expectations\n\nSince Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results.\n\n#### Filenames\n\n- Hyde Pages are files are stored in the _pages directory\n- The filename is used as the filename for the compiled HTML\n- Filenames should use kebab-case-slug format, followed by the appropriate extension\n- Files prefixed with _underscores are ignored by Hyde\n- Your page will be stored in _site\/.html\n- Blade pages will override any Markdown pages with the same filename when compiled\n\n## Creating Markdown Pages\n\nMarkdown pages are the easiest way to create static pages, and are similar to blog posts.\nYou may want to read that page first as it explains how front matter works\nand how to use it.\n\nYou can create a Markdown page by adding a file to the _pages directory where the filename ends in .md.\n\n### Scaffolding Markdown Pages\nScaffolding a Markdown page is as easy as using the HydeCLI.\n\nphp hyde make:page \"Page Title\"\n\nThis will create the following file saved as _pages\/page-title.md\n\ntitle: Page Title\n# Page Title\n\n\/\/ Write your content here\n\nYou can of course also create the file yourself with your text editor.\n\n### Front Matter is optional\n\nThe only front matter supported is the title, which is used as the HTML ``.\n\nIf you don't supply a front matter title, Hyde will attempt to find a title in the Markdown body by searching\nfor the first level one heading (# Page Title), and if that fails, it will generate one from the filename.\n\nIn the future, more front matter options such as page descriptions and meta tags will be supported.\n\n## Creating Blade Pages\n\nSince Hyde is based on Laravel and uses the Blade templating engine,\nyou can use Blade pages to create more complex pages.\n\nIf you are not familiar with Blade, you may want to read the Laravel Blade docs first.\n\n### Scaffolding Blade Pages\nWe can scaffold Blade pages using the same CLI command as Markdown pages, however,\nthis time we need to specify that we want to use the blade page type.\n\nphp hyde make:page \"Page Title\" --type=\"blade\"\n\nThis will create a file saved as _pages\/page-title.blade.php\n\nYou can of course also create the file yourself with your text editor, however,\nthe scaffolding command for Blade pages is arguably even more helpful than the\none for Markdown pages, as this one automatically adds the included app Layout.\n\nLet's take a look at the scaffolded file. You can also copy and paste this\nif you don't want to use the scaffolding command.\n\n@extends('hyde::layouts.app')\n@section('content')\n@php($title = \"Page Title\")\n\n\tPage Title\n\n@endsection\n\nTip: You don't have to use Blade in Blade pages. It's also perfectly fine to use plain HTML,\nhowever you still need to use the blade.php extension so Hyde can recognize it.\n\n## When to use which?\n\nMarkdown pages look great and work well for simple \"about\" pages and the like, but with Markdown we are still pretty limited.\n\nIf you are comfortable with it, and have the need for it, use Blade to create more complex pages! And mix and match between them! Some page types are better suited for Markdown, and others for Blade.\n\n### Comparison\n\nMarkdown                                            Blade\n\n\u2795 Easily created and updated                        \u2795 Full control over the HTML\n\u2795 Very fast to create simple and lightweight pages  \u2795 Use the default app layout or create your own\n\u2795 Suited for content heavy pages such as \"about us\" \u2795 Use Blade templates and components to keep code DRY\n\u2796 Not as flexible as Blade pages                    \u2795 Use arbitrary PHP right in the page to create dynamic content\n                                                    \u2795 Access to all Blade helper directives like @foreach, @if, etc.\n                                                    \u2796 Takes longer to create as as you need to write the markup\n                                                    \u2796 You may need to recompile your CSS if you add Tailwind classes\n\n### Live Demos\n\nThe Hyde website (hydephp.com) uses both Markdown and Blade pages. The homepage for example, is a Blade page and uses a bunch of custom HTML.\n\nA great example of a Markdown page can be found at hydephp.github.io\/portfolio-demo, you can see the page source here on GitHub.\n\n## Bonus: Creating HTML Pages\n\nIf you have an already created HTML page, simply drop it into the pages directory and Hyde will copy it over as it is into the site directory. Like all other Hyde pages, the page will show up in the navigation menu using a title parsed from the filename.","destination":"static-pages"},{"slug":"advanced-customization","title":"Advanced Customization","content":"Advanced Customization\n\nIntroduction & Warning\n\ndanger Danger lies ahead! Read this before you proceed.\n\nThis page covers advanced usage of potentially experimental and unstable features and is intended for developers\nwho know what they are doing and can handle the risk of breaking things. The article will also cover things\nthat you can do, but that you maybe should not. With great power comes great responsibility. You have been warned.\n\nDocumentation here will be mainly example driven, as it is assumed you have somewhat of an understanding of what you are doing already.\n\nEmoji legend\nEach section is marked with an emoji that indicates the level of risk. Note that pretty much all of these\nare experimental features, and are not at all supported. Use at your own risk.\n\n- \ud83e\uddea = Indicates experimental features bound to change at any time.\n- \u26a0 = Exercise caution when using this feature.\n- \ud83d\udc94 = This could seriously break things\n\nA note on file paths\n\nWhen Hyde references files, especially when passing filenames between components, the file path is almost always relative to the root of the project. When an absolute path is required, the path is resolved through the Hyde::path() helper. Specifying absolute paths yourself will likely lead to unforeseen problems.\n\nCustomizing source directories \ud83e\uddea\n\nwarning This may cause integrations such as the realtime compiler to break. You'll also likely need to update route key names in your templates.\n\nThe source directory paths are stored in the PageModel objects.\nYou can change them by modifying the static property, for example in a service provider.\n\nInternally, the paths are registered in the HydeServiceProvider using the following method:\n\n\/\/ filepath Hyde\\Framework\\HydeServiceProvider\nuse Hyde\\Framework\\Concerns\\RegistersFileLocations;\n\npublic function register(): void\n{\n    $this->registerSourceDirectories([\n        BladePage::class => '_pages',\n        MarkdownPage::class => '_pages',\n        MarkdownPost::class => '_posts',\n        DocumentationPage::class => '_docs',\n    ]);\n}\n\nCustom source root directory \ud83e\uddea\n\nHydePHP will by default look for the underscored source directories in the root of your project.\nIf you're not happy with this, it's easy to change! For example, you might want everything in a 'src'\nsubdirectory. That's easy enough, just set the value of the source_root setting in config\/hyde.php to 'src'!\n\nAutomatic change \ud83e\uddea\nYou can even make this change automatically with the php hyde change:sourceDirectory command!\n\nWhen run, Hyde will update the source directory setting in the config file, then create the directory if it doesn't exist, then move all source directories into it.\n\nCustom media directory \ud83e\uddea\n\nThe media directory houses assets like images and stylesheets. The default directory is _media, and upon building the site,\nHyde will copy all files in this directory to _site\/media (or whatever your configured output and media directories are).\n\nYou can change the path to this directory by setting the media_directory setting in config\/hyde.php.\nNote that this change will affect both the source and output directories. For example, if you set the value to assets,\nall files from assets will be copied to _site\/assets.\n\nIf the setting starts with an underscore, that will be removed from the output directory, so files in assets will be copied to site\/assets.\n\ninfo Note that you will likely need to manually update webpack.mix.js so Laravel Mix can compile the assets correctly.\n\ninfo You will of course also need to copy over any existing files from the old directory to the new one.\n\nCustomizing the output directory \u26a0\n\ndanger Hyde deletes all files in the output directory before compiling the site. Don't set this path to a directory that contains important files!\n\nIf you want to store your compiled website in a different directory than\nthe default _pages, you can change the path using the following configuration option in config\/hyde.php. The path is expected to be relative to your project root.\n\n\/\/ filepath config\/hyde.php\nreturn [\n    'output_directory' => 'docs',\n];\n\nSetting an absolute path\n\nSince Hyde v0.64.0-beta, the site output directory will always be resolved within the project root. If you want to compile the site to an absolute path outside your project, it's instead recommended that you use a build task to copy the files to the desired location automatically after the site has been compiled.","destination":"advanced-customization"},{"slug":"advanced-markdown","title":"Advanced Markdown","content":"Advanced Markdown\n\nIntroduction\n\nSince HydePHP makes heavy use of Markdown there are some extra features and helpers created just for Hyde to make using Markdown even easier!\n\nRaw HTML Tags\n\nHydePHP uses the GitHub Flavored Markdown extension to convert Markdown. This, by default strips out some HTML tags. If you want to allow all arbitrary HTML tags, and understand the risks involved, enable all HTML tags by setting the following option to true in your config\/markdown.php file.\n\n\/\/ filepath: config\/markdown.php\n\/\/ torchlight! {\"lineNumbers\": false}\n'allow_html' => true,\n\nThis, will behind the scenes add the bundled DisallowedRawHtml extension, and configure it so that no HTML tags are stripped out.\n\nBlade Support\n\nSince Hyde v0.30.x you can use Laravel Blade in Markdown files!\n\nUsing Blade in Markdown\n\nTo use Blade in your Markdown files, simply use the Blade shortcode directive,\nfollowed by your desired Blade string.\n\nStandard syntax\n\n [Blade]: {{ \"Hello World!\" }} \/\/ Will render: 'Hello World!'\n\nBlade includes\n\nOnly single-line shortcode directives are supported. If you need to use multi-line Blade code,\nuse an @include directive to render a more complex Blade template.\nYou can pass data to includes by specifying an array to the second argument.\n\n [Blade]: @include(\"hello-world\")\n [Blade]: @include(\"hello\", [\"name\" => \"World\"])\n\nEnabling Blade-supported Markdown\nIt's disabled by default since it allows arbitrary PHP to run, which could be a security risk,\ndepending on your setup. However, if your Markdown is trusted, and you know it's safe,\nyou can enable it in the config\/markdown.php file.\n\n\/\/ torchlight! {\"lineNumbers\": false}\n'enable_blade' => true,\n\nLimitations\n\nAll shortcodes must be the first word on a new line.\nFor example, using a space before the [Blade]: will intentionally cause it to not render.\n\nColoured Blockqoutes\n\nThe HydePHP Markdown converter also supports some extra directives and features. One of them being four different coloured blockquotes. Simply append the colour after the initial > character.\n\n\u200e> Normal Blockquote\n\u200e>info Info Blockquote\n\u200e>warning Warning Blockquote\n\u200e>danger Danger Blockquote\n\u200e>success Success Blockquote\n\nNormal Blockquote\ninfo Info Blockquote\nwarning Warning Blockquote\ndanger Danger Blockquote\nsuccess Success Blockquote\n\nCustomizations\n\nYou can easily customize these styles too by adding and editing the following in your resources\/app.css file, and then recompiling your site styles.\nThe code examples here use the Tailwind @apply directives, but you could also use border-color: blue; just as well.\n\n\/* filepath resources\/app.css\n\n\/* Markdown Features *\/\n\n.prose blockquote.info {\n\t@apply border-blue-500;\n}\n\n.prose blockquote.success {\n\t@apply border-green-500;\n}\n\n.prose blockquote.warning {\n\t@apply border-amber-500;\n}\n\n.prose blockquote.danger {\n\t@apply border-red-600;\n}\n\nLimitations\n\nNote that these currently do not support multi-line blockquotes.\n\nCode block filepaths\n\nWhen browsing these documentation pages you may have noticed a label in the top right corner of code blocks specifying the file path.\nThese are also created by using a custom Hyde feature that turns code comments into automatic code blocks.\n\nSimply add a code comment in the first line of a fenced code block like so:\n\n\/\/ Filepath: _docs\/advanced-markdown.md\n\u200e\/\/ Filepath: hello-world.php\n\necho 'Hello World!';\n\nWhich becomes:\n\n\/\/ Filepath: hello-world.php\n\necho 'Hello World!';\n\nAlternative syntax\n\nThe syntax is rather forgiving by design, and supports using both \/\/ and # for comments.\nThe colon is also optional, and the 'filepath' string is case-insensitive. So the following is also perfectly valid:\n\n\u200e\/\/ filepath hello.js\nconsole.log('Hello World!');\n\nIf you have a newline after the filepath like in the first example, it will be removed so your code stays readable.\n\nAdvanced usage\n\nIf you have enabled HTML in Markdown by setting the allow_html option to true in your config\/markdown.php file,\nanything within the path label will be rendered as HTML. This means you can add links, or even images to the label.\n\n\/\/ Filepath: View file on Github\n\u200e\/\/ Filepath: View file on Github\nLimitations\n\nThe filepaths are hidden on mobile devices using CSS to prevent them from overlapping with the code block.","destination":"advanced-markdown"},{"slug":"collections","title":"File-based Collections","content":"# File-based Collections\n\n## Introduction to Hyde Data Collections\n\nHyde provides DataCollections, a subset of Laravel Collections giving you\na similar developer experience to working with Eloquent Collections. However, instead of accessing a database,\nit's all entirely file-based using static data files such as Markdown, Yaml, and JSON files which get\nparsed into objects that you can easily work with.\n\nAs you have access to all standard Laravel Collection methods, you are encouraged to read the\nLaravel Collections documentation for more information.\n\nThis article covers advanced usage intended for those who are writing their own Blade views, and is not required as Hyde comes pre-packaged with many templates for you to use.\n\n## High-Level Concept Overview\n\nTo make collections easy to use and understand, Hyde makes a few assumptions about the structure of your collections.\nFollow these conventions and creating dynamic static sites will be a breeze.\n\n1. Collections are accessed through static methods in the DataCollections class.\n2. Collections are stored as files in subdirectories of the resources\/collections directory.\n3. To get a collection, specify name of the subdirectory the files are stored in.\n4. Data will be parsed into differing objects depending on which facade method you use. See the table below.\n5. The class is aliased so that you can use it in Blade files without having to include the namespace.\n6. While not enforced, each subdirectory should probably only have the same filetype to prevent developer confusion\n7. Unlike source files for pages, files starting with underscores are not ignored.\n8. You can customize the source directory for collections through a service provider.\n9. If the base source directory does not exist, it will be created for you.\n\n## Available Collection Types\n\n### Quick Reference Overview\n\nThe following facade methods for creating data collections are available:\n\n\\Hyde\\Support\\DataCollections::markdown(string $name);\n\\Hyde\\Support\\DataCollections::yaml(string $name);\n\\Hyde\\Support\\DataCollections::json(string $name, bool $asArray = false);\n\n### Quick Reference Table\n\nCollection Type                       Facade Method  Returned Object Type                                                                                                                                     File Extension\n\nMarkdown ::markdown() MarkdownDocument                                          .md\nYaml         ::yaml()     FrontMatter                                                    .yaml,&nbsp; .yml\nJson         ::json()     stdClass OR&nbsp; array .json\n\n## Markdown Collections\n\n### Usage\n\n$collection = \\Hyde\\Support\\DataCollections::markdown('name');\n\n### Example returns\n\nHere is an approximation of the data types contained by the variable created above:\n\n\\Hyde\\Support\\DataCollections {\n    \"testimonials\/1.md\" => Hyde\\Markdown\\Models\\MarkdownDocument\n    \"testimonials\/2.md\" => Hyde\\Markdown\\Models\\MarkdownDocument\n    \"testimonials\/3.md\" => Hyde\\Markdown\\Models\\MarkdownDocument\n  ]\n}\n\nThe returned MarkdownObjects look approximately like this:\n\n\\Hyde\\Markdown\\Models\\MarkdownDocument {\n  +matter: Hyde\\Markdown\\Models\\FrontMatter {\n     +data: array:1 [\n       \"author\" => \"John Doe\"\n     ]\n  }\n  +markdown: Hyde\\Markdown\\Models\\Markdown {\n    +body: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit...\"\n  }\n}\n\nAssuming the Markdown document looks like this:\n\nauthor: \"John Doe\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit...\n\n## Yaml Collections\n\n### Usage\n\n$collection = \\Hyde\\Support\\DataCollections::yaml('name');\n\n### Example returns\n\nHere is an approximation of the data types contained by the variable created above:\n\n\\Hyde\\Support\\DataCollections {\n  \"authors\/1.yaml\" => Hyde\\Markdown\\Models\\FrontMatter {\n    +data: array:1 [\n      \"name\" => \"John Doe\",\n      \"email\" => \"john@example.org\"\n    ]\n  }\n}\n\nAssuming the Yaml document looks like this:\n\nname: \"John Doe\"\nemail: \"john@example.org\"\n\nwarning Note that the Yaml file should start with --- to be parsed correctly.\n\n## Json Collections\n\n### Usage\n\n$collection = \\Hyde\\Support\\DataCollections::json('name');\n\nBy default, the entries will be returned as stdClass objects. If you want to return an associative array instead, pass true as the second parameter:\n\n$collection = \\Hyde\\Support\\DataCollections::json('name', true);\n\nSince both return values use native PHP types, there are no example returns added here, as I'm sure you can imagine what they look like.\n\n## Markdown Collections - Hands-on Guide\n\nI think the best way to explain DataCollections is through examples, so let's create a Blade page with customer testimonials!\n\nThis example will use Markdown Collections, but the same concepts apply to all other collection types.\n\n#### Setting up the file structure\n\nWe start by setting up our directory structure. We will create a testimonials subdirectory, which will be the collection name.\n\nIn it, we will place Markdown files. Each file will be a testimonial.\nThe Markdown will be parsed into a MarkdownDocument object which parses any optional YAML front matter.\n\nHere is the sample Markdown we will use:\n\n\/\/ filepath: resources\/collections\/testimonials\/1.md\nauthor: John Doe\nLorem ipsum dolor sit amet, consectetur adipiscing elit...\n\nLet's take a look at our directory structure. I just copied the same file a few times.\nYou can name the files anything you want, I kept it simple and just numbered them.\n\nresources\/collections\n\u2514\u2500\u2500 testimonials\n    \u251c\u2500\u2500 1.md\n    \u251c\u2500\u2500 2.md\n    \u2514\u2500\u2500 3.md\n\n#### Using the Facade to Access the Collections\n\nNow for the fun part! We will use the DataCollections::markdown() to access all our files into a convenient object.\nThe class is registered with an alias, so you don't need to include any namespaces when in a Blade file.\n\nThe general syntax to use the facade is as follows:\n\nDataCollections::markdown('subdirectory_name')\n\nThis will return a Hyde DataCollections object, containing our Markdown files as MarkdownDocument objects. Here is a quick look at the object the facade returns:\n\n^ Hyde\\Support\\DataCollections {#651 \u25bc\n  #items: array:3 [\u25bc\n    \"testimonials\/1.md\" =&gt; Hyde\\Markdown\\Models\\MarkdownDocument {#653 \u25bc\n      +matter: Hyde\\Markdown\\Models\\FrontMatter {#652 \u25b6}\n      +markdown: Hyde\\Markdown\\Models\\Markdown {#654 \u25b6}\n    }\n    \"testimonials\/2.md\" =&gt; Hyde\\Markdown\\Models\\MarkdownDocument {#656 \u25b6}\n    \"testimonials\/3.md\" =&gt; Hyde\\Markdown\\Models\\MarkdownDocument {#659 \u25b6}\n  ]\n}\n\n#### Implementing it in a Blade view\n\nLet's create a Blade page to display all our testimonials.\n\nphp hyde make:page \"Testimonials\" --type=\"blade\"\n\nAnd we can use the collection almost like any other Laravel one. As you can see, since each entry is a MarkdownDocument class,\nwe are able to get the author from the front matter, and the content from the body.\n\n\/\/ filepath _pages\/testimonials.blade.php\n@foreach(DataCollections::markdown('testimonials') as $testimonial)\n    \n        {{ $testimonial->body }}\n        {{ $testimonial->matter['author'] }}\n    \n@endforeach","destination":"collections"},{"slug":"customization","title":"Customizing your Site","content":"# Customizing your Site\n\n## Introduction\n\nHyde favours \"Convention over Configuration\"\nand comes preconfigured with sensible defaults. However, Hyde also strives to be modular and endlessly customizable if you need it. This page guides you through the many options available!\n\nWhen referencing configuration options, we often use \"dot notation\" to specify the configuration file. For example, config('hyde.name') means that we are looking for the name option in the config\/hyde.php file.\n\nIf you want to reference these configuration options in your Blade views, or other integrations, please take a look at the Laravel Documentation.\n\n### Front Matter or Configuration Files?\n\nIn some cases, the same options can be set in the front matter of a page or in a configuration file. Both ways are always documented, and it's up to you to choose which one you prefer. Note that in most cases, if a setting is set in both the front matter and the configuration file, the front matter setting will take precedence.\n\n## Configuration Files Overview\n\nThere are a few configuration files available in the config directory. All options are documented, so feel free to look through the files and get familiar with the options available to you.\n\nBelow are two tables over the different configuration files. Click on a file name to see the default file on GitHub.\n\n### HydePHP Configuration Files\n\nThese are the main configuration files for HydePHP and lets you customize the look and feel of your site, as well as the behaviour of HydePHP.\n\nConfig File                                                                                                        Description\n\nhyde.php         Main HydePHP configuration file. Used for things ranging from site name and base URL to navigation menus and what features to enable.\ndocs.php         Options for the HydePHP documentation site generator module.\nmarkdown.php Configure Markdown related services, as well as change the CommonMark extensions.\n{.align-top}\n\ninfo Tip: The values in hyde.php can also be set in YAML by creating a hyde.yml file in the root of your project. See #yaml-configuration for more information.\n\n### Laravel & Package Configuration Files\n\nSince HydePHP is based on Laravel we also have a few configuration files related to them. You probably don't need to edit any of these unless you want to make changes to the application core.\n\nConfig File                                                                                                            Description\n\napp.php               Configures the underlying Laravel application.\ncommands.php     Configures the Laravel Zero commands for the HydeCLI.\ncache.php           Configures the cache driver and cache path locations.\nview.php             Configures the paths for the Blade View compiler.\ntorchlight.php Configures settings for the Torchlight syntax highlighting integration.\n\n{.align-top}\n\nIf any of these files are missing, you can run php hyde update:configs to copy the default files to your project.\n\n## Configuration Options\n\nWhile all options are already documented within the files, here are some further explanations of some of the options.\n\n### RSS feed generation\n\nWhen enabled, an RSS feed with your Markdown blog posts will be generated when you compile your static site.\nNote that this requires that a site_url is set!\n\n'rss.enabled' => true, \/\/ Default is true\n\nYou can customize the output filename using the following:\n\n'rss.filename' => 'feed.rss', \/\/ Default is feed.xml\n\nYou can set the RSS channel description using the following:\n\n'rss.description' => 'A collection of articles and tutorials from my blog', \/\/ Example\n\nIf an rss.description is not set one is created by appending \"RSS Feed\" to your site name.\n\n### Authors\nHyde has support for adding authors in front matter, for example to\nautomatically add a link to your website or social media profiles.\nHowever, it's tedious to have to add those to each and every\npost you make, and keeping them updated is even harder.\n\nYou can predefine authors in the Hyde config.\nWhen writing posts, just specify the username in the front matter,\nand the rest of the data will be pulled from a matching entry.\n\n#### Example\n\/\/ torchlight! {\"lineNumbers\": false}\n'authors' => [\n    Author::create(\n        username: 'mr_hyde', \/\/ Required username\n        name: 'Mr. Hyde', \/\/ Optional display name\n        website: 'https:\/\/hydephp.com' \/\/ Optional website URL\n    ),\n],\n\nThis is equivalent to the following front matter in a blog post:\nauthor:\n    username: mr_hyde\n    name: Mr. Hyde\n    website: https:\/\/hydephp.com\n\nBut you only have to specify the username:\nauthor: mr_hyde\n\n### Footer\n\nMost websites have a footer with copyright details and contact information. You probably want to change the Markdown to include your information, though you are of course welcome to keep the default attribution link!\n\nThe footer component is made up of a few levels of components, depending on how much you want to customize.\n\n#### Customizing the Markdown text\n\nThere are two ways to customize the footer text. First, you can set it in the configuration file:\n\n\/\/ filepath: config\/hyde.php\n'footer' => 'Site proudly built with HydePHP \ud83c\udfa9',\n\nIf you don't want to write Markdown in the configuration file, you can create a Markdown file in your includes directory. When this file is found, it will be used instead of the configuration setting.\n\n\/\/ filepath: resources\/includes\/footer.md\nSite proudly built with HydePHP \ud83c\udfa9\n\nIn both cases the parsed Markdown will be rendered in the footer Blade component.\n\n#### Customizing the Blade component\n\nThe actual footer component is rendered using the layouts\/footer.blade.php Blade template.\n\nIn this template we automatically render the configured footer Markdown text. If you want to change this behaviour, for example, HydePHP.com uses a more sophisticated footer, simply publish the footer component.\n\n#### Disabling the footer entirely\n\nIf you don't want to have a footer on your site, you can set the 'footer' configuration option to false.\n\n\/\/ filepath: config\/hyde.php\n'footer' => 'false',\n\n### Navigation Menu & Sidebar\nOne of my (the author's) favourite features with Hyde is its automatic navigation menu and documentation sidebar generator.\n\n#### How it works:\nThe sidebar works by creating a list of all the documentation pages.\n\nThe navigation menu is a bit more sophisticated, it adds all the top-level Blade and Markdown pages. It also adds an automatic link to the docs if there is an index.md in the _docs directory.\n\n#### Reordering Sidebar Items\nSadly, Hyde is not intelligent enough to determine what order items should be in (blame Dr Jekyll for this), so you will probably want to set a custom order.\n\nReordering items in the documentation sidebar is as easy as can be. In the hyde config, there is an array just for this. When the sidebar is generated it looks through this config array. If a slug is found here it will get priority according to its position in the list. If a page does not exist in the list they get priority 999, which puts them last.\n\nLet's see an example:\n\/\/ torchlight! {\"lineNumbers\": false}\n\/\/ This is the default values in the config. It puts the readme.md first in order.\n'documentationPageOrder' => [\n    'readme', \/\/ This is the first entry, so it gets the priority 0\n    'installation', \/\/ This gets priority 1\n    'getting-started', \/\/ And this gets priority 2\n    \/\/ Any other pages not listed will get priority 999 \n]\n\n#### Reordering Navigation Menu Items\n\nHyde makes an effort to organize the menu items in a sensible way. Putting your most important pages first. This of course may not always be how you want, so it's easy to reorder the menu items. Simply override the navigation.order array in the Hyde config. The priorities set will determine the order of the menu items. Lower values are higher in the menu. Any pages not listed will get priority 999.\n\n\/\/ filepath config\/hyde.php\n'navigation' => [\n    'order' => [\n        'index' => 0, \/\/ _pages\/index.md (or .blade.php)\n        'posts' => 10, \/\/ _pages\/posts.md (or .blade.php)\n        'docs\/index' => 100, \/\/ _docs\/index.md\n    ]\n]\n\nYou can also set the priority of a page directly in the front matter. This will override any dynamically infered or config defined priority. While this is useful for one-offs, it can make it harder to reorder items later on. It's up to you which method you prefer to use.\n\nnavigation:\n    priority: 10\n\nNote that since Blade pages do not support front matter, this will only work for Markdown pages.\n\n#### Adding Custom Navigation Menu Links\n\nYou can easily add custom navigation menu links similar how we add Authors. Simply add a NavItem model to the navigation.custom array.\n\nWhen linking to an external site, you should use the NavItem::forLink() method facade. The first two arguments are the destination and label, both required. Third argument is the priority, which is optional.\n\n\/\/ filepath config\/hyde.php\n'navigation' => [\n    'custom' => [\n        NavItem::forLink('https:\/\/github.com\/hydephp\/hyde', 'GitHub', 200),\n    ]\n]\n\nSimplified, this will then be rendered as follows:\n\nGitHub\n\n#### Excluding Items (Blacklist)\n\nSometimes, especially if you have a lot of pages, you may want to prevent links from showing up in the main navigation menu. To remove items from being automatically added, simply add the slug to the blacklist. As you can see, the 404 page has already been filled in for you.\n\nNote that we don't specify the page type, since only top level pages are added to the navigation menu (with the exception of the automatic documentation page link, which can be hidden in the config by using docs\/index).\n\n'navigation' => [\n    'exclude' => [\n        '404'\n    ]\n]\n\nYou can also specify that a page should be excluded by setting the page front matter. Note that since Blade pages do not support front matter, this will only work for Markdown pages.\n\nnavigation:\n    hidden: true\n\n#### Changing the menu item labels\n\nHyde makes a few attempts to find a suitable label for the navigation menu items to automatically create helpful titles. You can override the label using the navigation.label front matter property.\n\nFrom the Hyde config you can also override the label of navigation links using the by mapping the route key (identifier\/slug relative to the site root) to the desired title. Note that the front matter property will take precedence over the config property.\n\n\/\/ filepath config\/hyde.php\n'navigation' => [\n    'labels' => [\n        'index' => 'Start',\n        'docs\/index' => 'Documentation',\n    ]\n]\n\n## Blade Views\nHyde uses the Laravel templating system called Blade. Most parts have been extracted into components to be customized easily.\n\nBefore editing Blade views you should familiarize yourself with how they work in the official documentation https:\/\/laravel.com\/docs\/9.x\/blade.\n\nTo edit the default component you need to publish them first using the hyde publish:views command.\n\nThe files will then be available in the resources\/views\/vendor\/hyde directory.\n\n## Frontend Styles\nHyde is designed to not only serve as a framework but a whole starter kit and comes with a Tailwind starter template for you to get up and running quickly. If you want to customize these, you are free to do so. Please see the Managing Assets page to learn more.\n\n## CommonMark environment\n\nHyde uses League CommonMark for converting Markdown into HTML.\n\nHyde ships with the GitHub Flavored Markdown extension, and\nthe Torchlight extension is enabled automatically when needed.\n\nYou can add extra CommonMark extensions, or change the default ones, in the config\/markdown.php file.\n\n'extensions' => [\n\t\\League\\CommonMark\\Extension\\GithubFlavoredMarkdownExtension::class,\n\t\\League\\CommonMark\\Extension\\Attributes\\AttributesExtension::class,\n\t\\League\\CommonMark\\Extension\\DisallowedRawHtml\\DisallowedRawHtmlExtension::class,\n],\n\nIn the same file you can also change the config to be passed to the CommonMark environment.\n\n'config' => [\n\t'disallowedrawhtml' => [\n\t\t'disallowed_tags' => [],\n\t],\n],\n\n## YAML Configuration\n\nThe settings in the config\/hyde.php file can also be overridden by creating a hyde.yml file in the root of your project directory.\n\nNote that these cannot reference environment variables and you cannot interact with objects and services.\nBut that doesn't stop you from using both files if you want to. Just keep in mind that any values in yhe YAML file override any made in the PHP config.\n\nHere is an example hyde.yml file showing some of the available options in the normal hyde.php file.\n\n# filepath hyde.yml\nname: HydePHP\nurl: http:\/\/localhost\npretty_urls: false\ngenerate_sitemap: true\nrss.enabled: true\nrss.filename: feed.xml\n# rss.description:\nlanguage: en\noutputdirectory: site","destination":"customization"},{"slug":"extensions","title":"Extensions and Integrations","content":"Extensions and Integrations\n\nFirst party extensions\n\nRealtime Compiler\n\nThe Hyde Realtime Compiler is now included with Hyde\ninstallations and is what powers the php hyde serve command.\n\nGitHub**: hydephp\/realtime-compiler\nPackagist**: hydephp\/realtime-compiler\nYouTube video**: Introducing the Hyde Realtime Compiler\n\nIntegrations with third-party tools\n\nTorchlight\n\nAbout Torchlight\nTorchlight is an amazing API for syntax highlighting and is what this site uses.\nI cannot recommend it highly enough, especially for documentation sites and code-heavy blogs!\n\nGetting started\nTo get started you need an API token which you can get through the torchlight.dev website.\nIt is entirely free for personal and open source projects.\n\nWhen you have an API token, set it in the .env file in the root directory of your project.\nOnce a token is set, Hyde will automatically enable the CommonMark extension.\n\nTORCHLIGHTTOKEN=torch\n\nAttribution and configuration\n\nNote that you need to provide an attribution link, thankfully Hyde injects a customizable link automatically to all pages\nthat use Torchlight. You can of course disable this in the config\/torchlight.php file.\n'attribution' => [\n\t'enabled' => true,\n\t'markdown' => 'Syntax highlighting by Torchlight.dev',\n],\n\nContribute\n\nHave an idea for an extension or integration? Let me know! I'd love to hear from you.\n\nGet in touch on GitHub or send me a DM on Twitter.","destination":"extensions"},{"slug":"troubleshooting","title":"Troubleshooting","content":"# Troubleshooting\n\nSince Hyde has a lot of \"magic\" features which depend on some base assumptions,\nthere might be some \"gotchas\" you might run into. Here are some I can think of,\ndid you find a new one? Send a PR to update the docs!\n\nTip: You can run php hyde validate to run a series of tests to help you catch common issues.  \n{.info}\n\n## General Tips\n(In no particular order of importance)\n\n1. In general, Hyde is actually pretty forgiving. While this article makes it sound like there are a lot of rules to follow,\n   honestly don't worry about it. Hyde will attempt to fix mistakes and make your life easier.\n2. You don't need to set an H1 heading in blog posts. The H1 is set by Hyde based on the front matter title.\n3. You never need front matter, though it is often useful.\n   For example, Hyde makes attempts to guess the title for a page depending on the content. (Headings, filenames, etc).\n4. Currently, Hyde support for nested directories besides those already defined is experimental.\n\n## Conventions to follow\n\n### File naming\n\nFor Hyde to be able to discover your files, you should follow the following conventions.\n\nMarkdown files should have the extension .md. Blade files should have the extension .blade.php.\n\nUnexpected behaviour might occur if you use conflicting file names.\nAll the following filenames are resolved into the same destination file:\nfoo-bar.md, Foo-Bar.md, foo-bar.blade.php, causing only one of them to be saved.\n\nRemember, files retain their slugs when compiled to HTML.\n\n#### Summary\n- \u2714 Do use lowercase filenames and extensions\n- \u2714 Do use filenames written in kebab-case-format\n- \u2714 Do use the proper file extensions\n\n- \u274c Don't use conflicting source file names\n\n## Extra Information\n\n### Definitions\n\nWe will use the following definitions to describe the behaviour of Hyde.\nBased on this blog post.\n\nHyde**: The application that you are using.\nHydeCLI**: The command-line interface for Hyde.\nFramework**: The Hyde core codebase.\n\nSlug**: The filename without the extension (basename) (internally also known as identifier).  Example: hello-world\nFilename**: The full name of a file with the extension. Example: hello-world.md\nFilepath**: The full file path including extension (almost always relative to the Hyde project) Example: _posts\/hello-world.md\n\n#document-main-content > ul > li > p {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n## Common issues, causes, and solutions\n\nIssue                                              Possible Cause                                                                                                                                          Possible Solution\n\n404 error when visiting site                       Are you missing an index file in the _pages directory?                                                                                                  Add an index.md or index.blade.php\nNavigation menu not linking to the docs            You probably don't have an index.md file in the _docs directory.                                                                                        Create an index file\nPage not discovered when compiling                 The file name may be invalid                                                                                                                            Ensure you follow the correct file naming convention.\nPage compiles slowly                               The Torchlight extension may cause the compile times to increase as API calls need to be made.                                                          Try disabling Torchlight\nTorchlight not working                             Missing Composer package, missing API token, extension disabled in the config.                                                                          Reinstall Torchlight, add your token in the .env file, check config\n| Error in Parser.php: \"unable to parse\"             | Could be an issue with the YAML front matter parser.                                                                                                    | Try adding a block of front matter to the top of the file                                                                                                                                        | \nMissing styles and\/or assets                       You may have accidentally deleted the files, or you have added new Tailwind classes.                                                                    Run npm run dev\nImage not found                                    You may be using a bad relative path. See managing-assets.                                                   Ensure your relative paths are correct.\nWrong layout used                                  Hyde determines the layout template to use depending on the directory of the source file                                                                Ensure your source file is in the right directory.\nInvalid\/no permalinks or post URIs                 You may be missing or have an invalid site URL                                                                                                          Set the site URL in the .env file\nNo styles in custom Blade pages                    When using custom blade pages need to add the styles yourself. You can do this by extending the default layout                                          Use the app layout, or by include the Blade components directly.\nOverriding Hyde views is not working               Ensure the Blade views are in the correct directory.                                                                                                    Rerun php hyde publish:views.\nStyles not updating when deploying site            It could be a caching issue. To be honest, when dealing with styles, it's always a caching issue.                                                       Clear your cache, and optionally complain to your site host\nDocumentation sidebar items are in the wrong order Double check the config, make sure the slugs are written correctly. Check that you are not overriding with front matter.                                Check config for typos and front matter\nDocumentation table of contents is weird           The table of contents markup is generated by the Leauge\/CommonMark extension   Make sure that your Markdown headings make sense\nIssues with date in blog post front matter         The date is parsed by the PHP strtotime() function. The date may be in an invalid format, or the front matter is invalid                                Ensure the date is in a format that strtotime() can parse. Wrap the front matter value in quotes.\nRSS feed not being generated                       The RSS feed requires that you have set a site URL in the Hyde config or the .env file. Also check that you have blog posts, and that they are enabled. Check your configuration files.\nSitemap not being generated                        The sitemap requires that you have set a site URL in the Hyde config or the .env file.                                                                  Check your configuration files.\nUnable to do literally anything                    If everything is broken, you may be missing a Composer package or your configuration files could be messed up.                                          Run composer install and\/or composer update. If you can run HydeCLI commands, update your configs with php hyde publish:configs, or copy them manually from GitHub or the vendor directory.\n\n### Extra troubleshooting information\n\n#### Fixing a broken config\nIf your configuration is broken, you might not be able to run any commands through the HydeCLI.\nTo remedy this you can copy the config files from the vendor directory into the project directory.\nYou can do this manually, or with the following rescue command:\ncopy .\\vendor\\hyde\\framework\\config\\hyde.php .\\config\\hyde.php","destination":"troubleshooting"},{"slug":"updating-hyde","title":"Updating Hyde","content":"Updating Hyde\n\nWhile Hyde is in beta, stuff can change rapidly.\nThis guide will help you update Hyde to the latest version. It is recommended to back up your source files before updating.\n\nUpdating Hyde\/Framework\n\nRun the following command from your Hyde\/Hyde installation:\ncomposer update hyde\/framework\n\nNext, follow the post-update instructions for Hyde\/Hyde.\n\nUpdating Hyde\/Hyde\nWhen updating an existing installation, first ensure you have a Git backup of your source files to revert the update.\n\nDepending on how you installed Hyde, there are a few different ways to update it.\n\nUsing Git\nMake sure you have a remote set up for the repository.\ngit remote add upstream https:\/\/github.com\/hydephp\/hyde.git\n\nThen pull the latest changes from the remote:\ngit pull upstream master\n\nAfter this, you should update your composer dependencies:\ncomposer update\n\nNext, follow the post-update instructions for Hyde\/Hyde.\n\nManual Update\nSince all resource files are in the content directories you can simply copy those files to the new location.\n\nIf you have changed any other files, for example in the App directory, you will need to update those files manually as well. But if you have done that you probably know what you are doing. I hope. The same goes if you have created any custom blade components or have modified Hyde ones.\n\nExample CLI workflow, assuming the Hyde\/Hyde project is stored as my-project in the home directory:\ncd ~\nmv my-project my-project-old\ncomposer create-project hyde\/hyde my-project\n\ncp -r my-old-project\/pages my-project\/content\/pages\ncp -r my-old-project\/posts my-project\/content\/posts\ncp -r my-old-project\/media my-project\/content\/media\ncp -r my-old-project\/docs my-project\/content\/docs\ncp -r my-old-project\/config my-project\/config\n\nNext, follow the post-update instructions for Hyde\/Hyde. After verifying that everything is working, you can delete the old project directory.\n\nPost-update instructions\nAfter updating Hyde you should update your config and resource files. This is where things can get a tiny bit dangerous as the files will be overwritten. However, since you should be using Git, you can take care of any merge conflicts that arise.\n\nphp hyde publish:configs\nphp hyde update:assets\n\nIf you have published any of the Hyde Blade components you will need to re-publish them.\n\nphp hyde publish:views layouts\nphp hyde publish:views components\n\nNext, re-build your site.\n\nphp hyde build\n\nAnd recompile your assets if applicable.\n\nnpm install\nnpm run dev\/prod","destination":"updating-hyde"},{"slug":"basic-architecture-concepts","title":"Key HydePHP Concepts","content":"Key HydePHP Concepts\n\nIntroduction to Hyde\n\nHydePHP contains a few \"magic\" features so that you can focus on your content. It's encouraged that you read this page to get a high-level overview of what's going on behind the scenes.\n\nThe HydeCLI\n\nWhen you are not writing Markdown and Blade, most of your interactions with Hyde will be through the\nHyde Command Line Interface (CLI).\nSince the CLI is based on the Laravel Artisan Console, so you may actually already be familiar with it.\n\nYou should take a look at the Console Commands page\nto learn more and see the available commands and their usage.\n\nphp hyde  [--help]\n\nDirectory structure\n\nTo take full advantage of the framework, it may first be good to familiarize ourselves with the directory structure.\n\n\/\/ torchlight! {\"lineNumbers\": false}\n\u251c\u2500\u2500 _docs  \/\/ For documentation pages\n\u251c\u2500\u2500 _posts \/\/ For blog posts\n\u251c\u2500\u2500 _pages \/\/ For static Markdown and Blade pages\n\u251c\u2500\u2500 _media \/\/ Store static assets to be copied to the build directory\n\u251c\u2500\u2500 _site  \/\/ The build directory where your compiled site will be stored\n\u251c\u2500\u2500 config \/\/ Configuration files for Hyde and integrations\n\u251c\u2500\u2500 resources\/assets \/\/ Location for Laravel Mix source files (optional)\n\u2514\u2500\u2500 resources\/views\/components \/\/ Location for Blade components (optional)\n\nNote that the _site directory is emptied every time you run the hyde build command.\nIt's intended that you keep the directory out of your VCS, for example by adding it to your .gitignore file.\n\nFile Autodiscovery\n\nContent files, meaning source Markdown and Blade files, are automatically\ndiscovered by Hyde and compiled to HTML when building the site.\nThis means that you don't need to worry about routing and controllers!\n\nThe directory a source file is in will determine the Blade template that is used to render it.\n\nHere is an overview of the content source directories, the output directory of the compiled files,\nand the file extensions supported by each. Files starting with an _underscore are ignored.\n\nPage\/File Type Source Directory Output Directory File Extensions\n\nStatic Pages   pages\/        site\/         .md, .blade.php\nBlog Posts     posts\/        site\/posts\/   .md\nDocumentation  docs\/         site\/docs\/    .md\nMedia Assets   media\/        site\/media\/   See full list below\n\nDefault media file types supported: .png, .svg, .jpg, .jpeg, .gif, .ico, .css, .js. Can be changed using the hyde.media_extensions config setting.\n\nConvention over Configuration\n\nHyde favours the \"Convention over Configuration\" paradigm and thus comes preconfigured with sensible defaults.\nHowever, Hyde also strives to be modular and endlessly customizable hackable if you need it.\nTake a look at the customization and configuration guide to see the endless options available!\n\nFront Matter\n\nAbout\n\nFront matter is heavily used in HydePHP to store metadata about about pages. Hyde uses the front matter data to generate rich and dynamic content. For example, a blog post category, author website, or featured image.\n\nUsing front matter is optional, as Hyde will dynamically generate data based on the content itself. (Though any matter you provide will take precedence over the automatically generated data.)\n\nMarkdown\n\nAll Markdown content files support Front Matter. Blog posts for example make heavy use of it.\n\nThe specific usage and schemas used for pages are documented in their respective documentation, however, here is a primer on the fundamentals.\n\n- Front matter is stored in a block of YAML that starts and ends with a --- line.\n- The front matter should be the very first thing in the Markdown file.\n- Each key-pair value should be on its own line.\n\nExample:\ntitle: \"My New Post\"\nauthor:\n  name: \"John Doe\"\n  website: https:\/\/mrhyde.example.com\nMarkdown comes here\n\nLorem ipsum dolor sit amet, etc.\n\nBlade\n\nwarning \ud83e\uddea This feature is experimental, and currently does not support multidimensional arrays or multi-line directives as the BladeMatter is statically parsed.\n\nHyde v0.58.0-beta brings experimental support for creating front-matter in Blade templates, called BladeMatter. The actual syntax is does not use YAML; but instead PHP. However, the parsed end result is the same.\n\nTo create BladeMatter, you simply use the default Laravel Blade @php directive to declare a variable anywhere in the template.\n\nExample:\n@php($title = 'BladeMatter Demo')\n\nIt will then be available through the global $page variable, $page->matter('title').\n\nAutomatic Routing\n\ninfo This covers an intermediate topic which is not required for basic usage, but is useful if you want to use the framework to design custom Blade templates.\n\nHigh-level overview\n\nIf you've ever worked in a MVC framework, you are probably familiar with the concept of routing. And you are probably also familiar with how boring and tedious it can be. Hyde takes the pain out of routing through the Hyde Autodiscovery process.\n\nInternally, when booting the Hyde application, Hyde will automatically discover all of the content files in the source directory and create a routing index for them. This index works as a two-way link between source files and compiled files.\n\nDon't worry if this sounds complex, as the key takeaway is that the index is created and maintained automatically. There is currently no way to manually add or remove files from the index. Making it function more like a source map than a proper router. Nevertheless, the routing system provides several helpers that you can optionally use in your Blade views to automatically resolve relative links and other useful features.\n\nAccessing routes\n\nEach route in your site is represented by a Route object. It's very easy to get a Route object instance from the Router's index. There are a few ways to do this, but most commonly you'll use the Routes facade's get() method where you provide a route key, and it will return the Route object. The route key is generally ``. Here are some examples:\n\n\/\/ Source file: _pages\/index.md\/index.blade.php\n\/\/ Compiled file: _site\/index.html\nRoutes::get('index')\n\n\/\/ Source file: _posts\/my-post.md\n\/\/ Compiled file: _site\/posts\/my-post.html\nRoutes::get('posts\/my-post')\n\n\/\/ Source file: _docs\/readme.md\n\/\/ Compiled file: _site\/docs\/readme.html\nRoutes::get('docs\/readme')\n\nUsing the x-link component\n\nWhen designing Blade layouts it can be useful to use the x-link component to automatically resolve relative links.\n\nYou can of course, use it just like a normal anchor tag like so:\nHome\n\nBut where it really shines is when you supply a route. This will then resolve the proper relative link, and format it to use pretty URLs if your site is configured to use them.\n\nHome\n\nYou can of course, also supply extra attributes like classes:\nHome\n\nNested directories\n\nIntroduction\n\nStarting with Hyde v0.52.x-beta, there is limited support for nested directories, please be mindful that the behaviour of this may change until the next few versions. Please report any issues you encounter on GitHub.\n\nFirst of, what do we mean by \"nested directories\"?\n\nSimply put, a nested directory in Hyde is a source directory that contains a subdirectory. For example, if you have a directory inside the _pages directory, that's a nested directory.\n\nBehaviour of nested pages\n\nAutomatically routed pages\n\nAs it is now, when you put a source file within a subdirectory of one of the following, it will be compiled into the corresponding output directory.\n\nThe following page types use this behaviour:\n- Blade pages (_pages\/)\n- Markdown pages (_pages\/)\n- Markdown blog posts (_posts\/)\n\nFor example, a source file stored as pages\/about\/contact.md will be compiled into site\/about\/contact.html, and a blog post stored as posts\/2022\/my-post.md will be compiled into site\/posts\/2022\/my-post.html.\n\nDocumentation pages\n\nDocumentation pages behave a bit differently. Here, all documentation source files will still be compiled to the _site\/docs\/ directory, but the subdirectory name will be used to assign a sidebar group\/category to the page.\n\nSo for example, a source file stored as docs\/getting-started\/installation.md will be compiled into site\/docs\/installation, and placed in the sidebar group Getting Started.\n\nYou can learn more about this in the documentation pages documentation.","destination":"basic-architecture-concepts"},{"slug":"console-commands","title":"Console Commands","content":"Console Commands\n\nThe primary way of interacting with Hyde is through the command line using the HydeCLI.\n\nIf you have ever used the Artisan Console in Laravel you will feel right at home,\nthe Hyde CLI is based on Artisan after all!\n\nHyde Commands\n\nTo use the HydeCLI, run php hyde from your project directory followed by a command.\n\nDocumentation syntax\n\nWondering what the different formatting in examples means? Here's a quick guide:\n\n # Comes after the command name.\n[] # Optional argument.\n\n--option # Sometimes referred to as a flag.\n--option= # Option which takes an value.\n[--option] # Optional option.\n\nAll HydeCLI commands start with php hyde. Anything in [brackets] is optional.\nIf an argument or option value has a space in it, it needs to be wrapped in quotes.\n\nGot stuck? The CLI can help.\n\nYou can always run the base command php hyde, or php hyde list, to show the list of commands.\n\nphp hyde # or php hyde list\n\nYou can also always add --help to a command to show detailed usage information.\nphp hyde  --help\n\nInitialize a new Hyde project\nphp hyde install\n\nWhile Hyde doesn't need much configuration to get started, this command speeds up the little there is.\n\nFor example, it updates the config file with the supplied site name and URL,\nand can also publish a starter homepage and rebuild the site.\n\nBuild the static site\nphp hyde build\n\nMaybe the most important command is the Build command, which -- you guessed it -- builds your static site!\n\nSupports the following options:\n--run-dev       Run the NPM dev script after build\n--run-prod      Run the NPM prod script after build\n--run-prettier  Format the output using NPM Prettier*\n--no-api        Disable API calls, for example, Torchlight\n\nSitemaps and RSS feeds\n\nSitemaps and RSS feeds require that you have a base site URL set, (and that you have not disabled them).\n\nWhen the features are available the build command will generate a sitemap and RSS feed.\n\nYou can also rebuild just the sitemap and RSS feed by using their respective commands:\n\nphp hyde build:sitemap\nphp hyde build:rss\n\nBuild a single file\nphp hyde rebuild \nUsing the php hyde build command is great and all that,\nbut when you just need to update that one file it gets a little... overkill.\nTo solve this problem, you can use the rebuild command to compile a single file.\n\nRequires the following Arguments:\npath   The relative file path\n\nExample:\nphp hyde rebuild _posts\/hello-world.md\n\nStart the realtime compiler.\nphp hyde serve\n\nThe serve command feels similar to the Laravel Artisan serve command, but works by\nstarting a local PHP server. When you visit a page, the server will use the\nrealtime compiler to locate the source file, recompile it, and proxy\nthe resulting HTML and any media files to your browser.\n\nIf you are missing the extension, you can always reinstall it with Composer composer require hyde\/realtime-compiler.\nYou can also learn more on the GitHub page.\n\nSupports the following options:\n--port[=PORT] [default: \"8080\"]\n--host[=HOST] [default: \"localhost\"]\n\nScaffold a new blog post file\nphp hyde make:post\n\nAt the core, blog posts are just pain ol' Markdown files.\nHowever, by adding a special YAML syntax called Front Matter, you can add metadata to your posts.\nBut who can remember the syntax? You can use the make:post command to scaffold a new blog post file.\nThe command will ask you a series of interactive questions, letting you fill in the blanks.\nIt will then create a file, converting your input into front matter. It automatically\nsets the date and time for you, and the file name will be based on the title.\n\nScaffold a new page file\nphp hyde make:page  [--type=TYPE]\n\nThe make:page command is similar to the make:post command and lets you quickly\ncreate one of the following page types:\n\nMarkdown**:\n  Creates a Markdown file in the _pages directory.\nBlade**:\n  Creates a Blade file using the app layout in the _pages directory.\nDocs**:\n  Creates a Markdown file in the _docs directory.\n\nIn all cases, the title will be used in the created file as the page title, and to generate the filename.\n\nRequires the following Arguments:\ntitle   The name of the page file to create\n\nSupports the following options:\n--type[=TYPE] The type of page to create (markdown, blade, or docs) [default: \"markdown\"]\n\nExample:\nphp hyde make:page About # Defaults to Markdown\nphp hyde make:page \"Photo Gallery\" --type=blade\nphp hyde make:page \"Hyde CLI Guide\" --type=docs\n\nTip: You can also use the shorthand --blade or --docs instead of --type=blade or --type=docs.\n\nTip: You can also tell Hyde to place the file in a subdirectory by specifying it before the title, just separate them with a slash. For example: php hyde make:page \"getting-started\/installation\" --type=\"docs\"\n\nPublish a default homepage\nphp hyde publish:homepage []\n\nHyde comes with three homepage options to choose from. The homepage you select is stored as\n_pages\/index.blade.php and becomes the index.html file when compiling the site.\n\nOn a fresh install the page 'welcome' is installed.\nHowever, you can use this command to publish another one.\nIf you have modified the file, you will need to supply the --force option to overwrite it.\n\nThe available homepages are:\n\nwelcome:** The default welcome page. Unlike the other pages, the styles are defined inline.\nposts:** A Blade feed of your latest blog posts. Perfect for a blog site!\nblank:** A blank Blade template with just the base app layout.\n\nYou can supply the homepage name directly to the command, otherwise you will be prompted to select one.\n\nPublish the Hyde Blade views\nphp hyde publish:views []\n\nSince Hyde is based on the Laravel view system the compiler uses Blade views and components.\nLaravel actually registers two locations for the Hyde views: your site's resources\/views\/vendor\/hyde directory and the resources directory located in the Framework package.\n\nWarning: This command will overwrite any existing files in the resources\/views\/vendor directory. \nYou should be sure to have backups, or version control such as Git, before running this command.\n\nSo, when compiling a site, Laravel will first check if a custom version of the view has been placed in the resources\/views\/vendor\/hyde directory by the developer (you). Then, if the view has not been customized, Laravel will search the Hyde framework view directory. This makes it easy for you to customize \/ override the package's views.\n\nThe available views you can publish are:\n\nall:** Publish all categories listed below\nlayouts:** Global layout views, such as the app layout, navigation menu, and Markdown page templates.\ncomponents:** More or less self-contained components, extracted for customizability and DRY code.\n404:** A beautiful 404 error page by the Laravel Collective. This file is already published by default.\n\nYou can supply the category name directly to the command, otherwise you will be prompted to select one.\n\nNote that when a view is updated in the framework you will need to republish the views to get the new changes!\n\nRepublish the configuration files\nphp hyde publish:configs\n\nWhen updating Hyde to a new version (or if you mess up your config files),\nyou can use this command to republish the configuration files.\n\nWarning: This command will overwrite any existing files in the config directory. \nYou should be sure to have backups, or version control such as Git, before running this command.\n\nList the available pages\/routes\nphp hyde route:list\n\nDisplay a list of all the discovered pages, their route keys, and their source and output paths.\n\nRun validation tests to optimize your site\nphp hyde validate\n\nHyde ships with a very useful command that runs a series of checks to validate your setup and catch any potential issues.","destination":"console-commands"},{"slug":"quickstart","title":"Quickstart Guide","content":"Quickstart Guide\n\nInstalling HydePHP using Composer\nThe recommended method of installing Hyde is using Composer.\n\/\/ torchlight! {\"lineNumbers\": false}\ncomposer create-project hyde\/hyde --stability=dev\n\nRequirements\nThese requirements are for your local development environment.\n\nHyde is based on Laravel 9\nwhich requires a minimum PHP version of 8.0.\nYou should also have Composer installed.\n\nTo use some features like compiling your own assets\nyou also need NodeJS and NPM.\n\nUsing the Hyde CLI\nThe main way to interact with Hyde is through HydeCLI.\n\nIf you are familiar with Laravel Artisan you will feel right at home.\n\nLearn more about the HydeCLI in the console commands documentation.\n\nStarting a development server\n\nTo make previewing your site a breeze you can use the real-time compiler\nwhich builds your pages on the fly. Start it using the HydeCLI:\nphp hyde serve\n\nCreating content\n\nDirectory structure\n\nCreating content with Hyde is easy. Simply place Markdown files in one of the source directories, which are as follows:\n\/\/ torchlight! {\"lineNumbers\": false}\n\u251c\u2500\u2500 _docs  \/\/ For documentation pages\n\u251c\u2500\u2500 _posts \/\/ For blog posts\n\u2514\u2500\u2500 _pages \/\/ For static Markdown and Blade pages\n\nThere are a few more directories that you should know about. Please see the\ndirectory structure section.\n\nScaffolding files\n\nYou can scaffold blog post files using the php hyde make:post command with automatically creates the front matter based on your input selections.\n\nYou can also scaffold pages with the php hyde make:page command.\n\nphp hyde make:page \"Page Title\" # Markdown is the default page type\nphp hyde make:page --type=blade # Creates a file extending the default layout\nphp hyde make:page --type=docs  # Quickly creates a documentation page\n\nAutodiscovery\n\nWhen building the site, Hyde will your source directories for files and\ncompile them into static HTML using the appropriate layout depending\non what kind of page it is. You don't have to worry about routing\nas Hyde takes care of that, including creating navigation menus!\n\nCompiling to static HTML\n\nNow that you have some amazing content, you'll want to compile your site into static HTML.\n\nThis is as easy as executing the build command:\nphp hyde build\n\nYour site is then stored in the _site directory.\n\nManaging assets\n\nHyde comes bundled with a precompiled and minified app.css containing all the Tailwind you need for the default views meaning that you don't even need to use NPM. However, Hyde is already configured to use Laravel Mix to compile your assets if you feel like there's a need to. See more on the Managing Assets page.\n\nDeploying your site\n\nYou are now ready to show your site to the world!\n\nSimply copy the _site directory to your web server's document root, and you're ready to go.\n\nYou can even use GitHub pages to host your site for free. That's what the Hyde website does,\nusing a CI that automatically builds and deploys this site.\n\nFurther reading\n\nHere's some ideas of what to read next:\n\n- Architecture Concepts & Directory Structure\n- Console Commands with the HydeCLI\n- Creating Blog Posts","destination":"quickstart"},{"slug":"directory-structure","title":"Directory Structure","content":"Redirecting you to architecture-concepts#directory-structure","destination":"directory-structure"},{"slug":"getting-started","title":"Getting Started","content":"Redirecting you to quickstart","destination":"getting-started"},{"slug":"installation","title":"Installation","content":"Redirecting you to quickstart","destination":"installation"}]