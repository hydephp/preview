[{"slug":"index","title":"Elegant and Powerful Static App Builder","content":"Elegant and Powerful Static App Builder \n  \n        -->\n        \n        \n         \n       \n         \n \n \u26a0 Beta Software Warning \n Heads up! HydePHP is still new and currently in beta. Please report any bugs and issues in the appropriate issue tracker. Versions in the 0.x series might not be stable and may change at any time. No backwards compatibility guarantees are made and there will be breaking changes without notice. \n Please wait until v1.0 for production use and remember to back up your source files before updating (use Git!). See  https:\/\/hydephp.com\/docs\/master\/updating-hyde  for the upgrade guide. \n About HydePHP \n HydePHP is a new Static Site Builder focused on writing content, not markup. With Hyde, it is easy to create static websites, blogs, and documentation pages using Markdown and (optionally) Blade. \n Hyde is different from other static site builders. It's blazingly fast and seriously simple to get started with, yet it has the full power of Laravel when you need it. \n Hyde makes creating websites easy and fun by taking care of the boring stuff, like routing, writing boilerplate, and endless configuration. Instead, when you create a new Hyde project, everything you need to get started is already there -- including precompiled TailwindCSS, well crafted Blade templates, and easy asset management. \n Hyde is powered by Laravel Zero which is a stripped-down version of the robust Laravel Framework. Using Blade templates the site is intelligently compiled into static HTML. \n Hyde was inspired by JekyllRB and is created for Developers who are comfortable writing posts in Markdown. It requires virtually no configuration out of the box as it favours convention over configuration and is preconfigured with sensible defaults. \n Installation \n The recommended method of installation is using Composer. \n  composer create-project hyde\/hyde --stability=dev\n  \n For the best experience you should have PHP &gt;= 8.0, Composer, and NPM installed. \n To learn more, head over to the  quickstart page .","destination":"index.html"},{"slug":"blog-posts","title":"Creating Blog Posts","content":"Creating Blog Posts \n Introduction to Hyde Posts \n Making blog posts with Hyde is easy. At the most basic level,\nall you need is to add a Markdown file to your  _posts  folder. \n To use the full power of the Hyde post module however,\nyou'll want to add YAML Front Matter to your posts. \n You can scaffold posts with automatic front matter using the HydeCLI: \n  php hyde make:post\n  \n Learn more about scaffolding posts, and other files, in the  console commands  documentation. \n Short Video Tutorial \n&lt;iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube-nocookie.com\/embed\/gjpE1U527h8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>&lt;\/iframe>\n Best Practices and Hyde Expectations \n Since Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results. \n Filenames \n \n Markdown post files are stored in the  _posts  directory \n The filename is used as the filename for the compiled HTML \n Filenames should use  kebab-case-slug  followed by the extension  .md \n \n Files prefixed with  _underscores  are ignored by Hyde \n Your post will be stored in  _site\/posts\/&lt;slug&gt;.html \n \n \n  Example:  \n  \u2714 _posts\/hello-world.md # Valid and will be compiled to _site\/posts\/hello-world.html\n  \n Front Matter \n Front matter is optional, but highly recommended for blog posts. \n You can read more about the Front Matter format in the  Front Matter documentation .\nHere is a quick primer: \n \n Front matter is stored in a block of YAML that starts and ends with a  ---  line. \n The front matter should be the very first thing in the Markdown file. \n Each key-pair value should be on its own line. \n The front matter is used to construct dynamic HTML markup for the post as well as meta tags and post feeds.\nYou are encouraged to look at the compiled HTML to learn and understand how your front matter is used. \n \n  Example:  \n  ---\ntitle: &quot;My New Post&quot;\n---\n\n## Markdown comes here\n  \n You can use the  php hyde make:post  command to automatically generate the front matter based on your input. \n A first look at Front Matter \n Before digging in deeper on all the supported front matter options,\nlet's take a look at what a basic post with front matter looks like. \n This file was created using the  make:post  by hitting the  Enter  key to use\nall the defaults (with some extra lorem ipsum to illustrate). \n  ---\ntitle: My New Post\ndescription: A short description used in previews and SEO\ncategory: blog\nauthor: Mr. Hyde\ndate: 2022-05-09 18:38\n---\n\n## Write your Markdown here\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit.\nAutem aliquid alias explicabo consequatur similique,\nanimi distinctio earum ducimus minus, magnam.\n  \n How the Front Matter is used \n The front matter is used to construct dynamic HTML markup for the post as well as meta tags and post feeds. \n You are encouraged to look at the compiled HTML to learn and understand how your front matter is used. \n Front matter syntax \n Here is a quick reference of the syntax Hyde uses and expects: \n  ---\nkey: value\nstring: &quot;quoted string&quot;\nboolean: true\ninteger: 100\narray:\n  key: value\n  key: value\n---\n  \n Supported Front Matter properties \n Post Front Matter Schema \n Here is a quick reference of the supported front matter properties.\nKeep on reading to see further explanations, details, and examples. \n \n \n \n  KEY NAME  \n  VALUE TYPE  \n  EXAMPLE \/ FORMAT  \n \n \n \n \n  title  \n string \n &quot;My New Post&quot; \n \n \n  description  \n string \n &quot;A short description&quot; \n \n \n  category  \n string \n &quot;my favorite recipes&quot; \n \n \n  date  \n string \n &quot;YYYY-MM-DD [HH:MM]&quot; \n \n \n  author  \n string\/array \n  See  author  section  \n \n \n  image  \n string\/array \n  See  image  section  \n \n \n \n Note that YAML here is pretty forgiving. In most cases you do not need to wrap strings\nin quotes, but it can help in certain edge cases, thus they are included here. \n In the examples below, when there are multiple keys, they signify various ways to use the parameter. \n Title \n  title: &quot;My New Post&quot;\n  \n Description \n  description: &quot;A short description used in previews and SEO&quot;\n  \n Category \n  category: blog\ncategory: &quot;My favorite recipes&quot;\n  \n Date \n  date: &quot;2022-01-01 12:00&quot; \ndate: &quot;2022-01-01&quot; \n  \n Author \n  author: &quot;Mr. Hyde&quot; # Arbitrary name displayed &quot;as is&quot;\nauthor: mr_hyde # Username defined in `authors` config\nauthor: # Array of author data\n  name: &quot;Mr. Hyde&quot; \n  username: mr_hyde \n  website: https:\/\/twitter.com\/HydeFramework\n  \n When specifying an array you don't need all the sub-properties.\nThe example just shows all the supported values. Array values here\nwill override all the values in the  authors  config entry. \n Image \n  image: image.jpg # Expanded by Hyde to `_media\/image.jpg` and is resolved automatically\nimage: https:\/\/cdn.example.com\/image.jpg # Full URL starting with `http(s):\/\/`)\nimage:\n  path: image.jpg\n  uri: https:\/\/cdn.example.com\/image.jpg # Takes precedence over `path`\n  description: &quot;Alt text for image&quot;\n  title: &quot;Tooltip title&quot;\n  copyright: &quot;Copyright (c) 2022&quot;\n  license: &quot;CC-BY-SA-4.0&quot;\n  licenseUrl: https:\/\/example.com\/license\/\n  credit: https:\/\/photographer.example.com\/\n  author: &quot;John Doe&quot;\n  \n When supplying an image with a local image path, the image is expected to be stored in the  _media\/  directory. \n The image will be used as the cover image, and any array data is constructed into a dynamic fluent caption,\nand injected into post and page metadata. \n \n See  posts\/introducing-images \nfor a detailed blog post with examples and schema information!\n{ .info } \n \n Using images in posts \n To use images stored in the  _media\/  directory, you can use the following syntax: \n  ![Image Alt](..\/media\/image.png &quot;Image Title&quot;) # Note the relative path\n  \n To learn more, check out the  chapter in managing assets","destination":"blog-posts.html"},{"slug":"compile-and-deploy","title":"Compile and Deploy your site","content":"Compile and Deploy your site \n Running the build command \n Compile the entire site to static HTML \n Now that you have some amazing content, you'll want to compile your site into static HTML. \n  This is as easy as executing the  build  command:  \n  php hyde build\n  \n Other ways to compile the site \n  You can also compile a single file:  \n  php hyde rebuild &lt;filepath&gt;\n  \n  And, you can even start a development server to compile your site on the fly:  \n  php hyde serve\n  \n Further reading \n Learn more about these commands in the  console commands  documentation: \n \n \n Build command \n \n \n Rebuild command \n \n \n Serve command \n \n \n Key Concept: Autodiscovery \n When building the site, Hyde will your source directories for files and compile them into static HTML using the appropriate layout depending on what kind of page it is. You don't have to worry about routing as Hyde takes care of that, including creating navigation menus! \n \n Deploying your site \n One of the things that make static sites so enjoyable to work with is how easy it is to deploy them to the web.\nThis list is not exhaustive, but gives you a general idea of the most common ways to deploy your site.\nIf you have ideas to add to the documentation, please send a pull request! \n General deployment \n In essence, all you need to do is copy the contents of the  _site  directory to a web server and you're done. \n Once the site is compiled there is nothing to configure or worry about. \n FTP and File Managers \n If you have a conventional web host, you can use FTP\/SFTP\/FTPS to upload your site to the web server.\nSome web hosting services also have web based file managers. \n To deploy your site using any of these methods, all you need to do is upload the entire contents\nof your  _site  directory to the web server, usually in the  public_html ,  htdocs , or  www  directory. \n GitHub Pages - Manually \n GitHub Pages is a free service that allows you to host your static site on the web. \n In general, push the entire contents of your  _site  directory to the  gh-pages  branch of your repository,\nor the  docs\/  directory on your main branch, depending on how you set it up. \n Please see the  GitHub Pages documentation  for more information. \n GitHub Pages - CI\/CD \n Hyde works amazing with GitHub Pages and GitHub Actions and the entire build and deploy process can be automated. \n \n \n We have a great blog post on how to do this,  Automate HydePHP sites using GitHub Actions and GitHub Pages . \n \n \n You can also copy our sample  GitHub Actions Workflow.yml file . \n \n \n By the way, HydePHP.com is hosted on GitHub Pages, and the site is compiled in a GitHub Action workflow that compiles and\ndeploys the site automatically when the source is updated using  this GitHub workflow .","destination":"compile-and-deploy.html"},{"slug":"documentation-pages","title":"Creating Documentation Pages","content":"Creating Documentation Pages \n Introduction to Hyde Documentation Pages \n Hyde makes it easier than ever to create documentation sites.\nBy the way, this documentation site is of course made with the Hyde Documentation module! \n In short, all you need to do is put standard Markdown files in the  _docs\/  directory and Hyde will do the rest. \n What is &quot;the rest&quot;, you may ask? Well, for starters: \n \n Hyde compiles your Markdown content into a beautiful static HTML page based on  the Lagrafo frontend \n \n A sidebar (which is responsive) is automatically created based on your Markdown files\n \n If you have an  index.md  in the  _docs\/  directory, it will be used as the sidebar header \n You can even  customize the order and labels  of sidebar items \n \n \n If you have an  index.md  in the  _docs\/  directory,\na link to it will be added to the site navigation menu named &quot;Docs&quot;. \n If you have a Torchlight API token in your .env file, Hyde will even automatically enable Syntax Highlighting for you.\nSee more about this in the  extensions page . \n \n Best Practices and Hyde Expectations \n Since Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results. \n Filenames \n \n Hyde Documentation pages are files are stored in the  _docs  directory \n The filename is used as the filename for the compiled HTML \n Filenames should use  kebab-case-slug  format, followed by the appropriate extension \n Files prefixed with  _underscores  are ignored by Hyde \n You should always have an  index.md  file in the  _docs\/  directory \n Your page will be stored in  _site\/docs\/&lt;slug&gt;.html  unless you  change it in the config \n \n \n Creating Documentation Pages \n You can create a Documentation page by adding a file to the  _docs  directory where the filename ends in  .md . \n You can also scaffold one quickly by using the  HydeCLI . \n  php hyde make:page &quot;Page Title&quot; --type=&quot;docs&quot;\n  \n This will create the following file saved as  _docs\/page-title.md  \n  # Page Title\n  \n Front Matter is optional \n You don't need to use  front matter  to create a documentation page. \n However, Hyde still supports front matter here as it allows you to quickly override the default values. \n Here is a quick reference, however, you should take a look at the  dynamic content  section to learn more. \n  ---\ntitle: &quot;Page Title&quot;\nlabel: &quot;Sidebar Label&quot;\nhidden: true\npriority: 5\n---\n  \n Dynamic content generation \n Hyde makes documentation pages easy to create by automatically generating dynamic content such as the sidebar and page title.\nIf you are not happy with the results you can customize them in the config or with front matter. \n Before we look at how to override things, here is an overview of the relevant content Hyde generates,\nand where the data is from as well as where it can be overridden. \n \n \n \n Property \n Description \n Source \n Override in \n \n \n \n \n  title  (string) \n The title of the page used in the HTML  &lt;title&gt;  tag \n The first H1 heading ( # Foo ) \n Front matter \n \n \n  label  (string) \n The label for the page shown in the sidebar \n The page filename (slug) \n Front matter \n \n \n  hidden  (boolean) \n Hides the page from the sidebar \n  null  \n Front matter \n \n \n  priority  (integer) \n The priority of the page used for ordering the sidebar \n Defaults to 500 \n Front matter, config \n \n \n \n Sidebar \n The sidebar is automatically generated from the files in the  _docs  directory. You will probably want to change the order\nof these items. You can do this in two ways, either in the config or with front matter. \n Table of contents \n Hyde automatically generates a table of contents for the page and adds it to the sidebar. \n The behaviour of this can be changed in the configuration file.\nSee  the customization page  for more details. \n Sidebar ordering \n The sidebar is sorted\/ordered by the  priority  property. The higher the priority the further down in the sidebar it will be.\nThe default priority is 500. You can override the priority using the following front matter: \n  priority: 5\n  \n You can also change the order in the Docs configuration file.\nSee  the chapter in the customization page  for more details.  \n I personally think the config route is easier as it gives an instant overview, however the first way is nice as well.  \n Sidebar labels \n The sidebar items are labeled with the  label  property. The default label is the filename of the file.\nYou can change it with the following front matter: \n  label: &quot;My Custom Sidebar Label&quot;\n  \n Sidebar grouping \n Sidebar grouping was introduced in Hyde  v0.24.0-beta \nand allows you to group items in the sidebar into categories. This is useful for creating a sidebar with a lot of items.\nThe Hyde docs for instance use this. \n The feature is enabled automatically when one or more of your documentation pages have the category property set\nin the front matter. This will then switch to a slightly more compact sidebar layout with pages sorted into categories.\nAny pages without the category front matter will get put in the &quot;Other&quot; category. \n Using Front Matter \n To enable sidebar grouping, you can add the following front matter to your documentation pages: \n  category: &quot;Getting Started&quot;\n  \n Using sub-directories \n Since  v0.52.0-beta , you can also automatically group your documentation pages by placing source files in sub-directories. \n For example, putting a Markdown file in  _docs\/getting-started\/ , is equivalent to adding the same front matter in the step above. \n \n Note that the file will still be compiled to the  _site\/docs\/  directory like it would be if you didn't use the sub-directories. \n \n Hiding items \n You can hide items from the sidebar by adding the  hidden  property to the front matter: \n  hidden: true\n  \n This can be useful to create redirects or other items that should not be shown in the sidebar. \n \n The index page is by default not shown as a sidebar item, but instead is linked in the sidebar header.   \n \n Customization \n Please see the  customization page  for in-depth information on how to customize Hyde,\nincluding the documentation pages. Here is a high level overview for quick reference though. \n Output directory \n If you want to store the compiled documentation pages in a different directory than the default 'docs' directory,\nfor example to specify a version like the Hyde docs does, you can specify the output directory in the Docs configuration file. \n  'output_directory' =&gt; 'docs' \/\/ default\n'output_directory' =&gt; 'docs\/master' \/\/ What the Hyde docs use\n  \n Automatic navigation menu \n By default, a link to the documentation page is added to the navigation menu when an index.md file is found in the  _docs  directory. Please see the  the customization page  for more information. \n Sidebar header name \n By default, the site title shown in the sidebar header is generated from the configured site name suffixed with &quot;docs&quot;.\nYou can change this in the Docs configuration file. \n  'title' =&gt; 'API Documentation',\n  \n \n Tip: The header will link to the docs\/index page, if it exists. \n \n Sidebar page order \n To quickly arrange the order of items in the sidebar, you can reorder the page slugs in the list and the links will be sorted in that order.\nLink items without an entry here will have fall back to the default priority of 999, putting them last. \n  'sidebar_order' =&gt; [\n    'readme',\n    'installation',\n    'getting-started',\n]\n  \n See  the chapter in the customization page  for more details.   \n Table of contents settings \n In the  config\/docs.php  file you can configure the behavior, content,\nand the look and feel of the sidebar table of contents.\nYou can also disable the feature completely. \n  'table_of_contents' =&gt; [\n\t'enabled' =&gt; true,\n\t'min_heading_level' =&gt; 2,\n\t'max_heading_level' =&gt; 4,\n\t'smooth_page_scrolling' =&gt; true,\n],\n  \n Search feature \n Introduction \n The HydeSearch plugin was introduced in v0.29.0-beta and adds a search feature to documentation pages. \n The search feature is enabled by default.\nYou can disable it by removing the  documentationSearch  from the Hyde  Features  config array. \n Using the search \n The search works by generating a JSON search index which the JavaScript plugin loads asynchronously. \n Two types of search methods are added, one is a full page search screen that will saved to  docs\/search.html .\n  The full page can be disabled by setting  create_search_page  to  false  in the  docs  config.   \n \n Note that the fullpage search is used as a fallback for browsers that don't support the  &lt;dialogue&gt;  element, and may lead to 404 errors if disabled. \n \n The second method is a button added to the documentation pages, similar to how Algolia DocSearch works.\nOpening it will open a dialog modal with an integrated search screen.\nYou can also open the dialog using the keyboard shortcut  \/ . \n Hiding pages from indexing \n \n This feature was added in v0.40.0-beta. \n \n If you have a large page, like a changelog, on your documentation sites you may want to hide it from the search index. You can do this by adding the page slug to the  exclude_from_search  array in the  docs  config, similar to how navigation menu items are hidden. \n  \/\/ filepath: config\/docs.php\n\n'exclude_from_search' =&gt; [\n  'changelog',\n]\n  \n The page will still be accessible via the URL, but will be added to the search index JSON file. Don't include the file extension. \n Automatic &quot;Edit Page&quot; button \n Introduction \n Added in v0.31, Hyde can automatically add links to documentation pages that takes the user\nto a GitHub page (or similar) to edit the page. This makes it great for open-source projects\nlooking to allow others to contribute to the documentation in a quick and easy manner. \n The feature is automatically enabled when you specify a base URL in the Docs configuration file.\nHyde expects this to be a GitHub path, but it will probably work with other methods as well,\nif not, please send a PR and\/or create an issue on the  GitHub repository ! \n Example configuration \n Let's take a practical example for how HydePHP.com uses this feature. \n  \/\/ Filepath: config\/docs.php\n\n'source_file_location_base' =&gt; 'https:\/\/github.com\/hydephp\/docs\/blob\/master\/',\n  \n Changing the button text \n Changing the label is easy, just change the following config setting: \n  \/\/ Filepath: config\/docs.php\n'edit_source_link_text' =&gt; 'Edit Source on GitHub',\n  \n Changing the position \n By default the button will be shown in both the documentation page footer.\nYou can change this by setting the following config setting to  'header' ,  'footer' , or  'both'  \n  \/\/ Filepath: config\/docs.php\n'edit_source_link_position' =&gt; 'header',\n  \n Adding a button icon \n This is not included out of the box, but is easy to add with some CSS!\nJust target the  .edit-page-link  class. \n  \/\/ filepath e.g. app.css\n.edit-page-link::before {content: &quot;\u270f &quot;}","destination":"documentation-pages.html"},{"slug":"managing-assets","title":"Managing and Compiling Assets","content":"Managing and Compiling Assets \n Introduction \n Managing and compiling assets is a very common task in web development. Unfortunately, it's rarely fun. \n With hyde,  you don't have to do it , in fact, you can skip this entire page if you are happy with how it is.\nBut as always with Hyde, you can customize everything if you want to. \n Hyde ships with a complete frontend using Blade views, TailwindCSS styles, and Alpine.js interactions. Some extra custom styles are made in the HydeFront package, which is pre-installed and bundled in the pre-configured Laravel Mix. \n To get you started quickly, all the styles are already compiled minified into  _media\/app.css , which will be copied to the  _site\/media\/app.css  directory when you run  php hyde build . \n Some extra information, and answers to possible questions \n Do I have to use NPM to use Hyde? \n No. NPM is optional as all the compiled styles you need are already installed. You only need NPM if you want to compile your own styles. \n When do I need to compile assets? \n When customizing \n If you want to customize the Tailwind settings or add custom styles, you will need to take care of compiling the styles yourself. \n When adding new classes \n The  _media\/app.css  file that comes with Hyde contains TailwindCSS for all classes that are used in the default Blade views, as well as the HydeFront custom styles. \n If you customize the Blade views and add new classes, or if you add new classes in Blade-based pages, you may need to compile the assets yourself to get the new styles. \n If you stick to using Markdown based pages, you don't need to compile anything. \n How are assets stored and managed? \n Currently, the frontend assets are separated into three places. \n The  resources\/assets  contains  source  files, meaning files that will be compiled into something else. Here you will find the  app.css  file that bootstraps the TailwindCSS styles. This file is also an excellent place to add your custom styles. It is also where we import HydeFront. \n The  _media  folder contains  compiled  (and usually minified) files. When Hyde compiles your static site, all asset files here will get copied as they are into the  _site\/media  folder. \n The  _site\/media  folder contains the files that are served to the user. \n What is the difference between  _media  and  _site\/media ? \n It may seem weird to have two folders for storing the compiled assets, but it is quite useful. \n The  _site  directory is intended to be excluded from version control while the  _media  folder is included in the version control, though you may choose to exclude the compiled files from the  _media  folder if you want to. \n You are of course free to modify this behavior by editing the  webpack.mix.js  file. \n How do I compile assets? \n First, make sure that you have installed all the NodeJS dependencies using  npm install .\nThen run  npm run dev  to compile the assets. If you want to compile the assets for production, run  npm run prod .\nYou can also run  npm run watch  to watch for changes in the source files and recompile the assets automatically. \n How does it work? \n Hyde uses  Laravel Mix  (which is a wrapper for  webpack ) to compile the assets. \n When running the  npm run dev\/prod  command, the following happens: \n \n Laravel Mix will compile the  resources\/assets\/app.css  file into  _media\/app.css  using PostCSS with TailwindCSS and AutoPrefixer. \n Mix then copies the  _media  folder into  _site\/media , this is so that they are automatically accessible to your site without having to rerun  php hyde build , making blend perfectly with the realtime compiler ( php hyde serve ). \n \n Telling Hyde where to find assets \n Customizing the Blade templates \n To make it really easy to customize asset loading, the styles and scripts are loaded in dedicated Blade components. \n \n Styles are loaded in  hyde::layouts.styles \n \n Scripts are loaded in  hyde::layouts.scripts \n \n \n To customize them, run the following command: \n  php hyde publish:views layouts\n  \n Then edit the files found in  resources\/views\/vendor\/hyde\/layouts  directory of your project. \n You might not even need to do anything! \n For the absolute majority of the cases, you don't need to mess with these files. Hyde will automatically load the app.css file when it exists in the  _media  directory. \n If you want to load the same pre-compiled file included with Hyde but from a CDN, you can set  load_app_styles_from_cdn  to  true  in the  config\/hyde.php  file. While you lose the ability to customize it, your styles will be automatically updated when needed. \n Managing images \n As mentioned above, assets stored in the _media folder are automatically copied to the _site\/media folder,\nmaking it the recommended place to store images. You can then easily reference them in your Markdown files. \n Referencing images \n The recommended way to reference images are with relative paths as this offers the most compatibility,\nallowing you to browse the site both locally on your filesystem and on the web when serving from a subdirectory. \n \n warning Note: The path is relative to the  compiled  file in the site output \n \n The path to use depends on the location of the page. Note the subtle difference in the path prefix. \n \n If you are in a  Blog Post or Documentation Page , use  ..\/media\/image.png \n \n If in a  Markdown Page or Blade Page , use  media\/image.png \n \n While not recommended, you can also use absolute paths:  \/media\/image.png \n \n \n Making images accessible \n To improve accessibility, you should always add an  alt  text. Here is a full example for an image in a blog post: \n  ![Image Alt](..\/media\/image.png &quot;Image Title&quot;) # Note the relative path\n  \n Setting a featured image for blog posts \n Hyde offers great support for creating data-rich and accessible featured images for blog posts. \n You can read more about this in the  creating blog posts page .","destination":"managing-assets.html"},{"slug":"static-pages","title":"Creating Static Pages","content":"Creating Static Pages \n Introduction to Hyde Pages \n Hyde offers two ways to create static pages:\n Markdown pages  which are perfect for simple pages that focuses heavily on the content,\nand  Blade pages  which are perfect for more complex pages where you want full control over the HTML,\nand where you may want to include other components. \n Let's start with the basics. \n Best Practices and Hyde Expectations \n Since Hyde does a lot of things automatically, there are some things you may need\nto keep in mind when creating blog posts so that you don't get unexpected results. \n Filenames \n \n Hyde Pages are files are stored in the  _pages  directory \n The filename is used as the filename for the compiled HTML \n Filenames should use  kebab-case-slug  format, followed by the appropriate extension \n Files prefixed with  _underscores  are ignored by Hyde \n Your page will be stored in  _site\/&lt;slug&gt;.html \n \n Blade pages will override any Markdown pages with the same filename when compiled \n \n Creating Markdown Pages \n Markdown pages are the easiest way to create static pages, and are similar to  blog posts .\nYou may want to read that page first as it explains  how front matter works \nand how to use it. \n You can create a Markdown page by adding a file to the  _pages  directory where the filename ends in  .md . \n Scaffolding Markdown Pages \n Scaffolding a Markdown page is as easy as using the  HydeCLI . \n  php hyde make:page &quot;Page Title&quot;\n  \n This will create the following file saved as  _pages\/page-title.md  \n  ---\ntitle: Page Title\n---\n\n# Page Title\n\n\/\/ Write your content here\n  \n You can of course also create the file yourself with your text editor. \n Front Matter is optional \n The only front matter supported is the title, which is used as the HTML  &lt;title&gt; . \n If you don't supply a front matter title, Hyde will attempt to find a title in the Markdown body by searching\nfor the first level one heading ( # Page Title ), and if that fails, it will generate one from the filename. \n In the future, more front matter options such as page descriptions and meta tags will be supported. \n Creating Blade Pages \n Since Hyde is based on Laravel and uses the Blade templating engine,\nyou can use Blade pages to create more complex pages. \n If you are not familiar with Blade, you may want to read  the Laravel Blade docs  first. \n Scaffolding Blade Pages \n We can scaffold Blade pages using the same CLI command as Markdown pages, however,\nthis time we need to specify that we want to use the  blade  page type. \n  php hyde make:page &quot;Page Title&quot; --type=&quot;blade&quot;\n  \n This will create a file saved as  _pages\/page-title.blade.php  \n You can of course also create the file yourself with your text editor, however,\nthe scaffolding command for Blade pages is arguably even more helpful than the\none for Markdown pages, as this one automatically adds the included app Layout. \n Let's take a look at the scaffolded file. You can also copy and paste this\nif you don't want to use the scaffolding command. \n  @extends('hyde::layouts.app')\n@section('content')\n@php($title = &quot;Page Title&quot;)\n\n&lt;main class=&quot;mx-auto max-w-7xl py-16 px-8&quot;&gt;\n\t&lt;h1 class=&quot;text-center text-3xl font-bold&quot;&gt;Page Title&lt;\/h1&gt;\n&lt;\/main&gt;\n\n@endsection\n  \n \n Tip: You don't have to use Blade in Blade pages. It's also perfectly fine to use plain HTML,\nhowever you still need to use the  blade.php  extension so Hyde can recognize it. \n \n When to use which? \n Markdown pages look great and work well for simple &quot;about&quot; pages and the like, but with Markdown we are still pretty limited. \n If you are comfortable with it, and have the need for it, use Blade to create more complex pages! And mix and match between them! Some page types are better suited for Markdown, and others for Blade. \n Comparison \n \n \n \n Markdown \n Blade \n \n \n \n \n \u2795 Easily created and updated \n \u2795 Full control over the HTML \n \n \n \u2795 Very fast to create simple and lightweight pages \n \u2795 Use the default app layout or create your own \n \n \n \u2795 Suited for content heavy pages such as &quot;about us&quot; \n \u2795 Use Blade templates and components to keep code DRY \n \n \n \u2796 Not as flexible as Blade pages \n \u2795 Use arbitrary PHP right in the page to create dynamic content \n \n \n  \n \u2795 Access to all Blade helper directives like @foreach, @if, etc. \n \n \n  \n \u2796 Takes longer to create as as you need to write the markup \n \n \n  \n \u2796 You may need to  recompile your CSS  if you add Tailwind classes \n \n \n \n Live Demos \n The Hyde website ( hydephp.com ) uses both Markdown and Blade pages. \n The &quot;Privacy&quot; which you can find at  hydephp.com\/privacy  is a Markdown page,\nwhich is a perfect fit for this task, where the goal was to simply inform about the privacy policy. \n The &quot;Gallery&quot; which you can find at  hydephp.com\/gallery  is a Blade page.\nWhile a photo gallery could be used in a Markdown page, here I opted to use a Blade page instead. This allowed me\nto create a bunch of cool and dynamic interactions and animations as I had full control over the HTML and could\neasily add scripts, styles, and iframes. I also seperated sections into components to make them easier to manage.","destination":"static-pages.html"},{"slug":"advanced-customization","title":"Advanced Customization","content":"Advanced Customization \n Introduction &amp; Warning \n \n danger Danger lies ahead! Read this before you proceed. \n \n This page covers advanced usage of potentially experimental and unstable features and is intended for developers\nwho know what they are doing and can handle the risk of breaking things. The article will also cover things\nthat you  can  do, but that you maybe should not. With great power comes great responsibility. You have been warned. \n Documentation here will be mainly example driven, as it is assumed you have somewhat of an understanding of what you are doing already. \n Emoji legend \n Each section is marked with an emoji that indicates the level of risk. Note that pretty much all of these\nare experimental features, and are not at all supported. Use at your own risk. \n \n \ud83e\uddea = Indicates experimental features bound to change at any time. \n \u26a0 = Exercise caution when using this feature. \n \ud83d\udc94 = This could seriously break things \n \n A note on file paths \n When Hyde references files, especially when passing filenames between components, the file path is almost always relative to the root of the project. When an absolute path is required, the path is resolved through the  Hyde::path()  helper. Specifying absolute paths yourself will likely lead to unforeseen problems. \n Customizing source directories \ud83e\uddea \n \n warning This may cause integrations such as the realtime compiler to break. \n \n The source directory paths are stored in the PageModel objects.\nYou can change them by modifying the static property, for example in a service provider. \n Internally, the paths are registered in the HydeServiceProvider using the following method: \n  \/\/ filepath Hyde\\Framework\\HydeServiceProvider\nuse Hyde\\Framework\\Concerns\\RegistersFileLocations;\n\npublic function register(): void\n{\n    $this-&gt;registerSourceDirectories([\n        BladePage::class =&gt; '_pages',\n        MarkdownPage::class =&gt; '_pages',\n        MarkdownPost::class =&gt; '_posts',\n        DocumentationPage::class =&gt; '_docs',\n    ]);\n}\n  \n Customizing the output directory \u26a0 \n \n danger Hyde deletes all files in the output directory before compiling the site. Don't set this path to a directory that contains important files! \n \n If you want to store your compiled website in a different directory than\nthe default  _pages , you can change the path using the following configuration option in config\/hyde.php. The path is expected to be relative to your project root. \n  \/\/ filepath config\/hyde.php\nreturn [\n    'output_directory' =&gt; 'docs',\n];\n  \n Setting an absolute path \ud83d\udc94 \n If you want to store the output website outside your project with an absolute path you may do so at your own risk using a service provider. This is not supported or recommended as it may cause unintentional file deletions. \n  \/\/ filepath Boot method of a service provider\nStaticPageBuilder::$outputPath = '\/var\/www\/my-project\/';\n  \n Adding custom post-build hooks \ud83e\uddea \n \n info This feature should not be in danger of breaking things. However, it was added very recently and the implementation may change at any moment. See  this GitHub issue  for up to date information. \n \n Since v0.40.0 you can create custom post-build hooks. These hooks are code that is executed automatically after the site has been built using the  php hyde build  command. \n Minimal example \n Here is a minimal example to get you started. For all these examples we assume you put the file in the  App\/Actions  directory, but you can put them anywhere. \n  class SimpleHook extends AbstractBuildTask\n{\n    public function run(): void\n    {\n        $this-&gt;info('Hello World!');\n    }\n}\n  \n This will then output the following, where you can see that some extra output, including execution time tracking is added for us. We can of course customize this if we want, as you can see in the next example. \n \n $ php hyde build \n   Generic build task...  Hello World!  Done in 0.26ms \n \n Full example \n You can also set the description, and an optional  then()  method to run after the main hook has been executed. \n  &lt;?php\n\nnamespace App\\Actions;\n\nuse Hyde\\Framework\\Contracts\\AbstractBuildTask;\n\nclass ExampleHook extends AbstractBuildTask\n{\n    public static string $description = 'Say hello';\n\n    public function run(): void\n    {\n        $this-&gt;info('Hello World!');\n    }\n\n    public function then(): void\n    {\n\t\t$this-&gt;line('Goodbye World!');\n    }\n}\n  \n \n $ php hyde build \n   Say hello...   Hello World! \n  Goodbye World!\n \n Registering the hooks \n An autoloading feature is planned, but for now, you will need to register the hooks somewhere. There is a convenient place to do this, which is in the main configuration file,  config\/hyde.php . \n  \/\/ filepath config\/hyde.php\n'post_build_tasks' =&gt; [\n    \\App\\Actions\\SimpleHook::class,\n    \\App\\Actions\\ExampleHook::class,\n],\n  \n If you are developing an extension, I recommend you do this in the  boot  method of a service provider so that it can be loaded automatically. Do this by adding the fully qualified class name to the  BuildHookService::$postBuildTasks  array.","destination":"advanced-customization.html"},{"slug":"advanced-markdown","title":"Advanced Markdown","content":"Advanced Markdown \n Introduction \n Since HydePHP makes heavy use of Markdown there are some extra features and helpers created just for Hyde to make using Markdown even easier! \n Raw HTML Tags \n HydePHP uses the GitHub Flavored Markdown extension to convert Markdown. This, by default strips out some HTML tags. If you want to allow all arbitrary HTML tags, and understand the risks involved, enable all HTML tags by setting the following option to true in your  config\/markdown.php  file. \n  \/\/ filepath: config\/markdown.php\n\/\/ torchlight! {&quot;lineNumbers&quot;: false}\n'allow_html' =&gt; true,\n  \n This, will behind the scenes add the bundled  DisallowedRawHtml  extension, and configure it so that no HTML tags are stripped out. \n Blade Support \n Since Hyde v0.30.x you can use Laravel Blade in Markdown files! \n Using Blade in Markdown \n To use Blade in your Markdown files, simply use the Blade shortcode directive,\nfollowed by your desired Blade string. \n Standard syntax \n   [Blade]: {{ &quot;Hello World!&quot; }} \/\/ Will render: 'Hello World!'\n  \n Blade includes \n Only single-line shortcode directives are supported. If you need to use multi-line Blade code,\nuse an  @include  directive to render a more complex Blade template.\nYou can pass data to includes by specifying an array to the second argument. \n   [Blade]: @include(&quot;hello-world&quot;)\n [Blade]: @include(&quot;hello&quot;, [&quot;name&quot; =&gt; &quot;World&quot;])\n  \n Enabling Blade-supported Markdown \n It's disabled by default since it allows arbitrary PHP to run, which could be a security risk,\ndepending on your setup. However, if your Markdown is trusted, and you know it's safe,\nyou can enable it in the  config\/markdown.php  file. \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\n'enable_blade' =&gt; true,\n  \n Limitations \n All shortcodes must be the first word on a new line.\nFor example, using a space before the  [Blade]:  will intentionally cause it to not render.","destination":"advanced-markdown.html"},{"slug":"collections","title":"File-based Collections","content":"File-based Collections \n \n info This article covers advanced usage intended for those who are writing their own Blade views, and is not required as Hyde comes pre-packaged with many templates for you to use. \n \n \n warning This feature was added in v0.43.0-beta. \n \n Introduction to Hyde Data Collections \n Hyde provides  DataCollections , a subset of  Laravel Collections  giving you a similar developer experience to working with Eloquent Collections, but here, it's all entirely file-based. \n You get the have access to all Laravel Collection methods so you are encouraged to read the  Laravel Collections documentation  for more information. \n Currently only a Markdown collection type is added, but more types like YAML are planned. \n Enabling the feature \n You may need to enable the module by adding the feature to your Hyde configuration file's  features  array: \n  \/\/ filepath config\/hyde.php\n\n   'features' =&gt; [\n        Features::dataCollections(),\n    ],\n\n  \n High-Level Concept Overview \n To make collections easy to use and understand, Hyde makes a few assumptions about the structure of your collections. Follow these conventions and creating dynamic static sites will be a breeze. \n \n Collections are stored in the new  _data  directory. \n Each subdirectory in here can be a collection. \n Data collections are automatically generated when you use the Facade you will learn about below. \n When using one of the facades, you need to specify the collection name, this name is the name of the subdirectory. \n Each subdirectory should probably only have the same filetype to prevent developer confusion, but this is not enforced. \n Unlike Markdown pages, files starting with underscores are not ignored. \n You can customize the base  _data  directory through a service provider. \n \n Markdown Collections - Hands on Guide \n Setting up the file structure \n I think the best way to explain DataCollections is through examples. Let's create a Blade page with customer testimonials. \n We start by setting up our directory structure. We will create a  testimonials  subdirectory, which will be the collection name. \n In it we will place Markdown files. Each file will be a testimonial. The Markdown will be parsed into a MarkdownDocument object which parses any optional YAML front matter. \n Here is the sample Markdown we will use: \n  \/\/ filepath: _data\/testimonials\/1.md\n---\nauthor: John Doe\n---\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit...\n  \n Let's take a look at our directory structure. I just copied the same file a few times. You can name the files anything you want, I kept it simple and just numbered them. \n  _data\n\u2514\u2500\u2500 testimonials\n    \u251c\u2500\u2500 1.md\n    \u251c\u2500\u2500 2.md\n    \u251c\u2500\u2500 3.md\n    \u251c\u2500\u2500 4.md\n    \u2514\u2500\u2500 5.md\n  \n Using the Facade to Access the Collections \n Now for the fun part! We will use the  MarkdownCollection  facade to access all our files into a convenient object. The class is already aliased to the facade, so you don't need to use any namespaces. \n The general syntax to use the facade is as follows: \n  MarkdownCollection::get('subdirectory_name')\n  \n This will return a Hyde DataCollection object, containing our Markdown files as MarkdownDocument objects. Here is a quick look at the object the facade returns: \n   ^     Hyde\\Framework\\Modules\\DataCollections\\DataCollection  { #270 \u25bc    &nbsp;&nbsp;+ key : \" testimonials \"  &nbsp;&nbsp;+ parseTimeInMs :  5.02   --> &nbsp;&nbsp;# items :  array:5  [ \u25bc    &nbsp;&nbsp;&nbsp;&nbsp; 0  =&gt;  &nbsp;&nbsp;\" style=\"display: inline; color: rgb(18, 153, 218); \"> Hyde\\Framework\\Models  \\ MarkdownDocument  { #273 \u25bc    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ matter :  array:1  [ \u25b6 ]  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ body : \" Lorem ipsum dolor sit amet, consectetur adipiscing elit... \\n  \"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ title : \"\"  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ slug : \"\"  &nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;&nbsp;&nbsp;&nbsp; 1  =&gt;  &nbsp;&nbsp;\" style=\"display: inline; color: rgb(18, 153, 218); \"> Hyde\\Framework\\Models  \\ MarkdownDocument  { #274 \u25b6 }  &nbsp;&nbsp;&nbsp;&nbsp; 2  =&gt;  &nbsp;&nbsp;\" style=\"display: inline; color: rgb(18, 153, 218);\"> Hyde\\Framework\\Models  \\ MarkdownDocument  { #275 \u25b6 }  &nbsp;&nbsp;&nbsp;&nbsp; [The rest is truncated to conserve space...]   &nbsp;&nbsp; ]  &nbsp;&nbsp;# escapeWhenCastingToString :  false     }-->  \n Implementing it in a Blade view \n Let's create a Blade page to display all our testimonials. \n  php hyde make:page &quot;Testimonials&quot; --type=&quot;blade&quot;\n# or just touch _pages\/testimonials.blade.php\n  \n And we can use the collection almost like any other Laravel one. As you can see, we are able to get the author from the front matter, and the content from the body. \n  @foreach(MarkdownCollection::get('testimonials') as $testimonial)\n&lt;blockquote&gt;\n\t&lt;p&gt;{{ $testimonial-&gt;body }}&lt;\/p&gt;\n\t&lt;small&gt;{{ $testimonial-&gt;matter['author'] }}&lt;\/small&gt;\n&lt;\/blockquote&gt;\n@endforeach","destination":"collections.html"},{"slug":"customization","title":"Customizing your Site","content":"Customizing your Site \n Introduction \n Hyde favours  &quot;Convention over Configuration&quot; \nand comes preconfigured with sensible defaults. However, Hyde also strives to be modular and endlessly customizable if you need it. This page guides you through the many options available! \n When referencing configuration options, we often use &quot;dot notation&quot; to specify the configuration file. For example,  config('site.name')  means that we are looking for the  name  option in the  config\/site.php  file. \n If you want to reference these configuration options in your Blade views, or other integrations, please take a look at the  Laravel Documentation . \n Front Matter or Configuration Files? \n In some cases, the same options can be set in the front matter of a page or in a configuration file. Both ways are always documented, and it's up to you to choose which one you prefer. Note that in most cases, if a setting is set in both the front matter and the configuration file, the front matter setting will take precedence. \n Configuration Files Overview \n There are a few configuration files available in the  config  directory. All options are documented, so feel free to look through the files and get familiar with the options available to you. \n Below are two tables over the different configuration files. Click on a file name to see the default file on GitHub. \n HydePHP Configuration Files \n These are the main configuration files for HydePHP and lets you customize the look and feel of your site, as well as the behaviour of HydePHP. \n \n \n \n Config File \n Description \n \n \n \n \n  site.php  \n Configuration file for the site presentation settings, like site name and base URL. \n \n \n  hyde.php  \n HydePHP Framework settings, like what features to enable, and navigation menus. \n \n \n  docs.php  \n Options for the HydePHP documentation site generator module. \n \n \n  markdown.php  \n Configure Markdown related services, as well as change the CommonMark extensions. \n \n \n {.align-top} \n  \n \n \n \n Laravel &amp; Package Configuration Files \n Since HydePHP is based on Laravel we also have a few configuration files related to them. You probably don't need to edit any of these unless you want to make changes to the application core. \n \n \n \n Config File \n Description \n \n \n \n \n  app.php  \n Configures the underlying Laravel application. \n \n \n  commands.php  \n Configures the Laravel Zero commands for the HydeCLI. \n \n \n  cache.php  \n Configures the cache driver and cache path locations. \n \n \n  view.php  \n Configures the paths for the Blade View compiler. \n \n \n  torchlight.php  \n Configures settings for the Torchlight syntax highlighting integration. \n \n \n \n {.align-top} \n Configuration Options \n While all options are already documented within the files, here are some further explanations of some of the options. \n RSS feed generation \n When enabled, an RSS feed with your Markdown blog posts will be generated when you compile your static site.\nNote that this requires that a site_url is set! \n  'generate_rss_feed' =&gt; true, \/\/ Default is true\n  \n You can customize the output filename using the following: \n  'rss_filename' =&gt; 'feed.rss', \/\/ Default is feed.xml\n  \n You can set the RSS channel description using the following: \n  'rss_description' =&gt; 'A collection of articles and tutorials from my blog', \/\/ Example\n  \n If an rss_description is not set one is created by appending &quot;RSS Feed&quot; to your site name. \n Authors \n Hyde has support for adding authors in front matter, for example to\nautomatically add a link to your website or social media profiles.\nHowever, it's tedious to have to add those to each and every\npost you make, and keeping them updated is even harder. \n You can predefine authors in the Hyde config.\nWhen writing posts, just specify the username in the front matter,\nand the rest of the data will be pulled from a matching entry. \n Example \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\n'authors' =&gt; [\n    Author::create(\n        username: 'mr_hyde', \/\/ Required username\n        name: 'Mr. Hyde', \/\/ Optional display name\n        website: 'https:\/\/hydephp.com' \/\/ Optional website URL\n    ),\n],\n  \n This is equivalent to the following front matter in a blog post: \n  author:\n    username: mr_hyde\n    name: Mr. Hyde\n    website: https:\/\/hydephp.com\n  \n But you only have to specify the username: \n  author: mr_hyde\n  \n Footer \n Most websites have a footer with copyright details and contact information. You probably want to change the Markdown to include your information, though you are of course welcome to keep the default attribution link! \n The footer component is made up of a few levels of components, depending on how much you want to customize. \n Customizing the Markdown text \n There are two ways to customize the footer text. First, you can set it in the configuration file: \n  \/\/ filepath: config\/hyde.php\n'footer' =&gt; 'Site proudly built with [HydePHP](https:\/\/github.com\/hydephp\/hyde) \ud83c\udfa9',\n  \n If you don't want to write Markdown in the configuration file, you can create a Markdown file in your includes directory. When this file is found, it will be used instead of the configuration setting. \n  \/\/ filepath: resources\/_includes\/footer.md\nSite proudly built with [HydePHP](https:\/\/github.com\/hydephp\/hyde) \ud83c\udfa9\n  \n In both cases the parsed Markdown will be rendered in the footer Blade component. \n Customizing the Blade component \n The actual footer component is rendered using the   layouts\/footer.blade.php   Blade template. \n In this template we automatically render the configured footer Markdown text. If you want to change this behaviour, for example, HydePHP.com uses a more sophisticated footer, simply  publish the footer component . \n Disabling the footer entirely \n If you don't want to have a footer on your site, you can set the  'footer'  configuration option to  false . \n  \/\/ filepath: config\/hyde.php\n'footer' =&gt; 'false',\n  \n Navigation Menu &amp; Sidebar \n One of my (the author's) favourite features with Hyde is its automatic navigation menu and documentation sidebar generator. \n How it works: \n The sidebar works by creating a list of all the documentation pages. \n The navigation menu is a bit more sophisticated, it adds all the top-level Blade and Markdown pages. It also adds an automatic link to the docs if there is an  index.md  in the  _docs  directory. \n Reordering Sidebar Items \n Sadly, Hyde is not intelligent enough to determine what order items should be in (blame Dr Jekyll for this), so you will probably want to set a custom order. \n Reordering items in the documentation sidebar is as easy as can be. In the hyde config, there is an array just for this. When the sidebar is generated it looks through this config array. If a slug is found here it will get priority according to its position in the list. If a page does not exist in the list they get priority 999, which puts them last. \n Let's see an example: \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\n\/\/ This is the default values in the config. It puts the readme.md first in order.\n'documentationPageOrder' =&gt; [\n    'readme', \/\/ This is the first entry, so it gets the priority 0\n    'installation', \/\/ This gets priority 1\n    'getting-started', \/\/ And this gets priority 2\n    \/\/ Any other pages not listed will get priority 999 \n]\n  \n Reordering Navigation Menu Items \n Hyde makes an effort to organize the menu items in a sensible way. Putting your most important pages first. This of course may not always be how you want, so it's easy to reorder the menu items. Simply override the  navigation.order  array in the Hyde config. The priorities set will determine the order of the menu items. Lower values are higher in the menu. Any pages not listed will get priority 999. \n  \/\/ filepath config\/hyde.php\n'navigation' =&gt; [\n    'order' =&gt; [\n        'index' =&gt; 0, \/\/ _pages\/index.md (or .blade.php)\n        'posts' =&gt; 10, \/\/ _pages\/posts.md (or .blade.php)\n        'docs\/index' =&gt; 100, \/\/ _docs\/index.md\n    ]\n]\n  \n You can also set the priority of a page directly in the front matter. This will override any dynamically infered or config defined priority. While this is useful for one-offs, it can make it harder to reorder items later on. It's up to you which method you prefer to use. \n  ---\nnavigation:\n    priority: 10\n---\n  \n Note that since Blade pages do not support front matter, this will only work for Markdown pages. \n Adding Custom Navigation Menu Links \n You can easily add custom navigation menu links similar how we add Authors. Simply add a  NavItem  model to the  navigation.custom  array. \n When linking to an external site, you should use the  NavItem::toLink()  method facade. The first two arguments are the destination and label, both required. Third argument is the priority, which is optional. \n  \/\/ filepath config\/hyde.php\n'navigation' =&gt; [\n    'custom' =&gt; [\n        NavItem::toLink('https:\/\/github.com\/hydephp\/hyde', 'GitHub', 200),\n    ]\n]\n  \n Simplified, this will then be rendered as follows: \n  &lt;a href=&quot;https:\/\/github.com\/hydephp\/hyde&quot;&gt;GitHub&lt;\/a&gt;\n  \n Excluding Items (Blacklist) \n Sometimes, especially if you have a lot of pages, you may want to prevent links from showing up in the main navigation menu. To remove items from being automatically added, simply add the slug to the blacklist. As you can see, the  404  page has already been filled in for you. \n Note that we don't specify the page type, since only top level pages are added to the navigation menu (with the exception of the automatic documentation page link, which can be hidden in the config by using  docs\/index ). \n  'navigation' =&gt; [\n    'exclude' =&gt; [\n        '404'\n    ]\n]\n  \n You can also specify that a page should be excluded by setting the page front matter. Note that since Blade pages do not support front matter, this will only work for Markdown pages. \n  ---\nnavigation:\n    hidden: true\n---\n  \n Changing the menu item labels \n Hyde makes a few attempts to find a suitable label for the navigation menu items to automatically create helpful titles. You can override the title using the  navigation.title  front matter property. \n From the Hyde config you can also override the title of navigation links using the by mapping the slug (relative to the site root) to a title. Note that the front matter property will take precedence over the config property. \n  \/\/ filepath config\/hyde.php\n'navigation' =&gt; [\n    'labels' =&gt; [\n        'index' =&gt; 'Start',\n        'docs\/index' =&gt; 'Documentation',\n    ]\n]\n  \n Blade Views \n Hyde uses the Laravel templating system called Blade. Most parts have been extracted into components to be customized easily. \n \n Before editing Blade views you should familiarize yourself with how they work in the official documentation  https:\/\/laravel.com\/docs\/9.x\/blade . \n \n To edit the default component you need to publish them first using the  hyde publish:views  command. \n The files will then be available in the  resources\/views\/vendor\/hyde  directory. \n Frontend Styles \n Hyde is designed to not only serve as a framework but a whole starter kit and comes with a Tailwind starter template for you to get up and running quickly. If you want to customize these, you are free to do so. Please see the  Managing Assets  page to learn more. \n CommonMark environment \n Hyde uses  League CommonMark  for converting Markdown into HTML. \n Hyde ships with the GitHub Flavored Markdown extension, and\nthe Torchlight extension is enabled automatically when needed. \n You can add extra CommonMark extensions, or change the default ones, in the  config\/markdown.php  file. \n  'extensions' =&gt; [\n\t\\League\\CommonMark\\Extension\\GithubFlavoredMarkdownExtension::class,\n\t\\League\\CommonMark\\Extension\\Attributes\\AttributesExtension::class,\n\t\\League\\CommonMark\\Extension\\DisallowedRawHtml\\DisallowedRawHtmlExtension::class,\n],\n  \n In the same file you can also change the config to be passed to the CommonMark environment. \n  'config' =&gt; [\n\t'disallowed_raw_html' =&gt; [\n\t\t'disallowed_tags' =&gt; [],\n\t],\n],","destination":"customization.html"},{"slug":"extensions","title":"Extensions and Integrations","content":"Extensions and Integrations \n First party extensions \n Realtime Compiler \n The Hyde Realtime Compiler is now included with Hyde\ninstallations and is what powers the  php hyde serve  command. \n \n \n GitHub :  hydephp\/realtime-compiler \n \n \n Packagist :  hydephp\/realtime-compiler \n \n \n YouTube video :  Introducing the Hyde Realtime Compiler \n \n \n Integrations with third-party tools \n Torchlight \n About Torchlight \n Torchlight is an amazing API for syntax highlighting and is what this site uses.\nI cannot recommend it highly enough, especially for documentation sites and code-heavy blogs! \n Getting started \n To get started you need an API token which you can get through the  torchlight.dev website .\nIt is entirely  free for personal and open source projects . \n When you have an API token, set it in the  .env  file in the root directory of your project.\nOnce a token is set, Hyde will automatically enable the CommonMark extension. \n  TORCHLIGHT_TOKEN=torch_&lt;your-api-token&gt;\n  \n Attribution and configuration \n Note that you need to provide an attribution link, thankfully Hyde injects a customizable link automatically to all pages\nthat use Torchlight. You can of course disable this in the  config\/torchlight.php  file. \n  'attribution' =&gt; [\n\t'enabled' =&gt; true,\n\t'markdown' =&gt; 'Syntax highlighting by &lt;a href=&quot;https:\/\/torchlight.dev\/&quot; rel=&quot;noopener nofollow&quot;&gt;Torchlight.dev&lt;\/a&gt;',\n],\n  \n Contribute \n Have an idea for an extension or integration? Let me know! I'd love to hear from you. \n Get in touch on  GitHub  or send me a DM on  Twitter .","destination":"extensions.html"},{"slug":"troubleshooting","title":"Troubleshooting","content":"Troubleshooting \n Since Hyde has a lot of &quot;magic&quot; features which depend on some base assumptions,\nthere might be some &quot;gotchas&quot; you might run into. Here are some I can think of,\ndid you find a new one? Send a PR to  update the docs ! \n \n Tip: You can run  php hyde validate  to run a series of tests to help you catch common issues. \n{.info} \n \n General Tips \n (In no particular order of importance) \n \n In general,  Hyde is actually pretty forgiving . While this article makes it sound like there are a lot of rules to follow,\nhonestly don't worry about it. Hyde will attempt to fix mistakes and make your life easier. \n You don't need to set an H1 heading in blog posts. The H1 is set by Hyde based on the front matter title. \n You never need front matter, though it is often useful.\nFor example, Hyde makes attempts to guess the title for a page depending on the content. (Headings, filenames, etc). \n Currently, Hyde support for nested directories besides those already defined is experimental. \n \n Conventions to follow \n File naming \n For Hyde to be able to discover your files, you should follow the following conventions. \n Markdown files should have the extension  .md . Blade files should have the extension  .blade.php . \n Unexpected behaviour might occur if you use conflicting file names.\nAll the following filenames are resolved into the same destination file:\n foo-bar.md ,  Foo-Bar.md ,  foo-bar.blade.php , causing only one of them to be saved. \n Remember, files retain their slugs when compiled to HTML. \n Summary \n \n \n \u2714  Do  use lowercase filenames and extensions \n \n \n \u2714  Do  use filenames written in kebab-case-format \n \n \n \u2714  Do  use the proper file extensions \n \n \n \u274c  Don't  use conflicting source file names \n \n \n Extra Information \n Definitions \n We will use the following definitions to describe the behaviour of Hyde.\nBased on  this blog post . \n \n \n  Hyde : The application that you are using. \n \n \n  HydeCLI : The command-line interface for Hyde. \n \n \n  Framework : The Hyde core codebase. \n \n \n  Slug : The filename without the extension (basename) (internally also known as  identifier ).  Example:  hello-world  \n \n \n  Filename : The full name of a file with the extension. Example:  hello-world.md  \n \n \n  Filepath : The full file path including extension (almost always relative to the Hyde project) Example:  _posts\/hello-world.md  \n \n \n&lt;style>\n#document-main-content > ul > li > p {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n&lt;\/style>\n Common issues, causes, and solutions \n \n \n \n Issue \n Possible Cause \n Possible Solution \n \n \n \n \n 404 error when visiting site \n Are you missing an index file in the _pages directory? \n Add an index.md or index.blade.php \n \n \n Navigation menu not linking to the docs \n You probably don't have an index.md file in the _docs directory. \n Create an index file \n \n \n Page not discovered when compiling \n The file name may be invalid \n Ensure you follow the correct file naming convention. \n \n \n Page compiles slowly \n The Torchlight extension may cause the compile times to increase as API calls need to be made. \n Try disabling Torchlight \n \n \n Torchlight not working \n Missing Composer package, missing API token, extension disabled in the config. \n Reinstall Torchlight, add your token in the .env file, check config \n \n \n Error in Parser.php: &quot;unable to parse&quot; \n Could be an issue with the YAML front matter parser. \n Try adding a block of front matter to the top of the file \n \n \n Missing styles and\/or assets \n You may have accidentally deleted the files, or you have added new Tailwind classes. \n Run  npm run dev  \n \n \n Image not found \n You may be using a bad relative path. See  managing-assets . \n Ensure your relative paths are correct. \n \n \n Wrong layout used \n Hyde determines the layout template to use depending on the directory of the source file \n Ensure your source file is in the right directory. \n \n \n Invalid\/no permalinks or post URIs \n You may be missing or have an invalid site URL \n Set the site URL in the .env file \n \n \n No styles in custom Blade pages \n When using custom blade pages need to add the styles yourself. You can do this by extending the default layout \n Use the app layout, or by include the Blade components directly. \n \n \n Overriding Hyde views is not working \n Ensure the Blade views are in the correct directory. \n Rerun php hyde publish:views. \n \n \n Styles not updating when deploying site \n It could be a caching issue. To be honest, when dealing with styles, it's always a caching issue. \n Clear your cache, and optionally complain to your site host \n \n \n Documentation sidebar items are in the wrong order \n Double check the config, make sure the slugs are written correctly. Check that you are not overriding with front matter. \n Check config for typos and front matter \n \n \n Documentation table of contents is weird \n The table of contents markup is generated by the  Leauge\/CommonMark extension  \n Make sure that your Markdown headings make sense \n \n \n Issues with date in blog post front matter \n The date is parsed by the PHP strtotime() function. The date may be in an invalid format, or the front matter is invalid \n Ensure the date is in a format that strtotime() can parse. Wrap the front matter value in quotes. \n \n \n RSS feed not being generated \n The RSS feed requires that you have set a site URL in the Hyde config or the .env file. Also check that you have blog posts, and that they are enabled. \n Check your configuration files. \n \n \n Sitemap not being generated \n The sitemap requires that you have set a site URL in the Hyde config or the .env file. \n Check your configuration files. \n \n \n Unable to do literally anything \n If everything is broken, you may be missing a Composer package or your configuration files could be messed up. \n Run  composer install  and\/or  composer update . If you can run HydeCLI commands, update your configs with  php hyde update:configs , or copy them manually from GitHub or the vendor directory. \n \n \n \n Extra troubleshooting information \n Fixing a broken config \n If your configuration is broken, you might not be able to run any commands through the HydeCLI.\nTo remedy this you can copy the config files from the vendor directory into the project directory.\nYou can do this manually, or with the following rescue command: \n  copy .\\vendor\\hyde\\framework\\config\\hyde.php .\\config\\hyde.php","destination":"troubleshooting.html"},{"slug":"updating-hyde","title":"Updating Hyde","content":"Updating Hyde \n While Hyde is in beta, stuff can change rapidly. \n This guide will help you update Hyde to the latest version. It is recommended to back up your source files before updating. \n Updating Hyde\/Framework \n Run the following command from your Hyde\/Hyde installation: \n  composer update hyde\/framework\n  \n Next, follow the post-update instructions for Hyde\/Hyde. \n Updating Hyde\/Hyde \n When updating an existing installation, first ensure you have a Git backup of your source files to revert the update. \n Depending on how you installed Hyde, there are a few different ways to update it. \n Using Git \n Make sure you have a remote set up for the repository. \n  git remote add upstream https:\/\/github.com\/hydephp\/hyde.git\n  \n Then pull the latest changes from the remote: \n  git pull upstream master\n  \n After this, you should update your composer dependencies: \n  composer update\n  \n Next, follow the post-update instructions for Hyde\/Hyde. \n Manual Update \n Since all resource files are in the content directories you can simply copy those files to the new location. \n If you have changed any other files, for example in the App directory, you will need to update those files manually as well. But if you have done that you probably know what you are doing. I hope. The same goes if you have created any custom blade components or have modified Hyde ones. \n Example CLI workflow, assuming the Hyde\/Hyde project is stored as  my-project  in the home directory: \n  cd ~\nmv my-project my-project-old\ncomposer create-project hyde\/hyde my-project\n\ncp -r my-old-project\/_pages my-project\/content\/_pages\ncp -r my-old-project\/_posts my-project\/content\/_posts\ncp -r my-old-project\/_media my-project\/content\/_media\ncp -r my-old-project\/_docs my-project\/content\/_docs\ncp -r my-old-project\/config my-project\/config\n  \n Next, follow the post-update instructions for Hyde\/Hyde. After verifying that everything is working, you can delete the old project directory. \n Post-update instructions \n After updating Hyde you should update your config and resource files. This is where things can get a tiny bit dangerous as the files will be overwritten. However, since you should be using Git, you can take care of any merge conflicts that arise. \n  php hyde update:configs\nphp hyde update:assets\n  \n If you have published any of the Hyde Blade components you will need to re-publish them. \n  php hyde publish:views layouts\nphp hyde publish:views components\n  \n Next, re-build your site. \n  php hyde build\n  \n And recompile your assets if applicable. \n  npm install\nnpm run dev\/prod","destination":"updating-hyde.html"},{"slug":"architecture-concepts","title":"Key HydePHP Concepts","content":"Key HydePHP Concepts \n Introduction to Hyde \n HydePHP contains a few &quot;magic&quot; features so that you can focus on your content. It's encouraged that you read this page to get a high-level overview of what's going on behind the scenes. \n The HydeCLI \n When you are not writing Markdown and Blade, most of your interactions with Hyde will be through the\nHyde Command Line Interface (CLI).\nSince the CLI is based on the Laravel Artisan Console, so you may actually already be familiar with it. \n You should take a look at  the Console Commands page \nto learn more and see the available commands and their usage. \n  php hyde &lt;command&gt; [--help]\n  \n Directory structure \n To take full advantage of the framework, it may first be good to familiarize ourselves with the directory structure. \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\n\u251c\u2500\u2500 _docs  \/\/ For documentation pages              \n\u251c\u2500\u2500 _posts \/\/ For blog posts\n\u251c\u2500\u2500 _pages \/\/ For static Markdown and Blade pages\n\u251c\u2500\u2500 _media \/\/ Store static assets to be copied to the build directory\n\u251c\u2500\u2500 _site  \/\/ The build directory where your compiled site will be stored\n\u251c\u2500\u2500 config \/\/ Configuration files for Hyde and integrations\n\u251c\u2500\u2500 resources\/assets \/\/ Location for Laravel Mix source files (optional)\n\u2514\u2500\u2500 resources\/views\/components \/\/ Location for Blade components (optional)\n  \n \n Note that the  _site  directory is emptied every time you run the  hyde build  command.\nIt's intended that you keep the directory out of your VCS, for example by adding it to your .gitignore file. \n \n File Autodiscovery \n Content files, meaning source Markdown and Blade files, are automatically\ndiscovered by Hyde and compiled to HTML when building the site.\nThis means that you don't need to worry about routing and controllers! \n The directory a source file is in will determine the Blade template that is used to render it. \n Here is an overview of the content source directories, the output directory of the compiled files,\nand the file extensions supported by each. Files starting with an  _underscore  are ignored. \n \n \n \n Page\/File Type \n Source Directory \n Output Directory \n File Extensions \n \n \n \n \n Static Pages \n  _pages\/  \n  _site\/  \n  .md ,  .blade.php  \n \n \n Blog Posts \n  _posts\/  \n  _site\/posts\/  \n  .md  \n \n \n Documentation \n  _docs\/  \n  _site\/docs\/  \n  .md  \n \n \n Media Assets \n  _media\/  \n  _site\/media\/  \n See full list below \n \n \n \n \n \nDefault media file types supported: `.png`, `.svg`, `.jpg`, `.jpeg`, `.gif`, `.ico`, `.css`, `.js`. Can be changed using the `hyde.media_extensions` config setting.\n \n \n Convention over Configuration \n Hyde favours the &quot;Convention over Configuration&quot; paradigm and thus comes preconfigured with sensible defaults.\nHowever, Hyde also strives to be modular and endlessly customizable hackable if you need it.\nTake a look at the  customization and configuration guide  to see the endless options available! \n Front Matter \n About \n Front matter is heavily used in HydePHP to store metadata about about pages. Hyde uses the front matter data to generate rich and dynamic content. For example, a blog post category, author website, or featured image. \n Using front matter is optional, as Hyde will dynamically generate data based on the content itself. (Though any matter you provide will take precedence over the automatically generated data.) \n Markdown \n All Markdown content files support Front Matter. Blog posts for example make heavy use of it. \n The specific usage and schemas used for pages are documented in their respective documentation, however, here is a primer on the fundamentals. \n \n Front matter is stored in a block of YAML that starts and ends with a  ---  line. \n The front matter should be the very first thing in the Markdown file. \n Each key-pair value should be on its own line. \n \n  Example:  \n  ---\ntitle: &quot;My New Post&quot;\nauthor:\n  name: &quot;John Doe&quot;\n  website: https:\/\/mrhyde.example.com\n---\n\n## Markdown comes here\n\nLorem ipsum dolor sit amet, etc.\n  \n Blade \n \n warning \ud83e\uddea This feature is experimental, and currently does not support multidimensional arrays or multi-line directives as the BladeMatter is statically parsed. \n \n Hyde v0.58.0-beta brings experimental support for creating front-matter in Blade templates, called BladeMatter. The actual syntax is does not use YAML; but instead PHP. However, the parsed end result is the same. \n To create BladeMatter, you simply use the default Laravel Blade  @php  directive to declare a variable anywhere in the template. \n  Example:  \n  @php($title = 'BladeMatter Demo')\n  \n It will then be available through the global  $page  variable,  $page-&gt;matter('title') . \n Automatic Routing \n \n info This covers an intermediate topic which is not required for basic usage, but is useful if you want to use the framework to design custom Blade templates. \n \n High-level overview \n If you've ever worked in a MVC framework, you are probably familiar with the concept of routing. And you are probably also familiar with how boring and tedious it can be. Hyde takes the pain out of routing through the Hyde Autodiscovery process. \n Internally, when booting the Hyde application, Hyde will automatically discover all of the content files in the source directory and create a routing index for them. This index works as a two-way link between source files and compiled files. \n Don't worry if this sounds complex, as the key takeaway is that the index is created and maintained automatically. There is currently no way to manually add or remove files from the index. Making it function more like a source map than a proper router. Nevertheless, the routing system provides several helpers that you can optionally use in your Blade views to automatically resolve relative links and other useful features. \n Accessing routes \n Each route in your site is represented by a Route object. It's very easy to get a Route object instance from the Router's index. There are a few ways to do this, but most commonly you'll use the Route facade's  get()  method where you provide a route key, and it will return the Route object. The route key is generally  &lt;output-directory\/slug&gt; . Here are some examples: \n  \/\/ Source file: _pages\/index.md\/index.blade.php\n\/\/ Compiled file: _site\/index.html\nRoute::get('index') \n\n\/\/ Source file: _posts\/my-post.md\n\/\/ Compiled file: _site\/posts\/my-post.html\nRoute::get('posts.my-post')\n\n\/\/ Source file: _docs\/readme.md\n\/\/ Compiled file: _site\/docs\/readme.html\nRoute::get('docs.readme')\n  \n Using the  x-link  component \n When designing Blade layouts it can be useful to use the  x-link  component to automatically resolve relative links. \n You can of course, use it just like a normal anchor tag like so: \n  &lt;x-link href=&quot;index.html&quot;&gt;Home&lt;\/x-link&gt;\n  \n But where it really shines is when you supply a route. This will then resolve the proper relative link, and format it to use pretty URLs if your site is configured to use them. \n  &lt;x-link :href=&quot;Route::get('index')&quot;&gt;Home&lt;\/x-link&gt;\n  \n You can of course, also supply extra attributes like classes: \n  &lt;x-link :href=&quot;Route::get('index')&quot; class=&quot;btn btn-primary&quot;&gt;Home&lt;\/x-link&gt;\n  \n Nested directories \n Introduction \n Starting with Hyde v0.52.x-beta, there is limited support for nested directories, please be mindful that the behaviour of this may change until the next few versions. Please report any issues you encounter on  GitHub . \n First of, what do we mean by &quot;nested directories&quot;? \n Simply put, a nested directory in Hyde is a source directory that contains a subdirectory. For example, if you have a directory  inside  the  _pages  directory, that's a nested directory. \n Behaviour of nested pages \n Automatically routed pages \n As it is now, when you put a source file within a subdirectory of one of the following, it will be compiled into the corresponding output directory. \n The following page types use this behaviour: \n \n Blade pages ( _pages\/ ) \n Markdown pages ( _pages\/ ) \n Markdown blog posts ( _posts\/ ) \n \n For example, a source file stored as  _pages\/about\/contact.md  will be compiled into  _site\/about\/contact.html , and a blog post stored as  _posts\/2022\/my-post.md  will be compiled into  _site\/posts\/2022\/my-post.html . \n Documentation pages \n Documentation pages behave a bit differently. Here, all documentation source files will still be compiled to the  _site\/docs\/  directory, but the subdirectory name will be used to assign a sidebar group\/category to the page. \n So for example, a source file stored as  _docs\/getting-started\/installation.md  will be compiled into  _site\/docs\/installation.html , and placed in the sidebar group  Getting Started . \n You can learn more about this in the  documentation pages documentation .","destination":"architecture-concepts.html"},{"slug":"console-commands","title":"Console Commands","content":"Console Commands \n The primary way of interacting with Hyde is through the command line using the HydeCLI. \n If you have ever used the Artisan Console in Laravel you will feel right at home,\nthe Hyde CLI is based on Artisan after all! \n Hyde Commands \n To use the HydeCLI, run  php hyde  from your project directory followed by a command. \n Documentation syntax \n Wondering what the different formatting in examples means? Here's a quick guide: \n  &lt;argument&gt; # Comes after the command name.\n[&lt;argument&gt;] # Optional argument. \n\n--option # Sometimes referred to as a flag.\n--option=&lt;value&gt; # Option which takes an value.\n[--option] # Optional option.\n  \n All HydeCLI commands start with  php hyde . Anything in  [brackets]  is optional.\nIf an argument or option value has a space in it, it needs to be wrapped in quotes. \n Got stuck? The CLI can help. \n You can always run the base command  php hyde , or  php hyde list , to show the list of commands. \n  php hyde # or `php hyde list`\n  \n You can also always add  --help  to a command to show detailed usage information. \n  php hyde &lt;command&gt; --help\n  \n Initialize a new Hyde project \n  php hyde install         \n  \n While Hyde doesn't need much configuration to get started, this command speeds up the little there is. \n For example, it updates the config file with the supplied site name and URL,\nand can also publish a starter homepage and rebuild the site. \n Build the static site \n  php hyde build          \n  \n Maybe the most important command is the Build command, which -- you guessed it -- builds your static site! \n  Supports the following options:  \n  --run-dev       Run the NPM dev script after build\n--run-prod      Run the NPM prod script after build\n--run-prettier  Format the output using NPM Prettier*\n--no-api        Disable API calls, for example, Torchlight\n  \n Sitemaps and RSS feeds \n Sitemaps and RSS feeds require that you have a base site URL set, (and that you have not disabled them). \n When the features are available the build command will generate a sitemap and RSS feed. \n You can also rebuild just the sitemap and RSS feed by using their respective commands: \n  php hyde build:sitemap\nphp hyde build:rss\n  \n Build a single file \n  php hyde rebuild &lt;filepath&gt;       \n  \n Using the php hyde build command is great and all that,\nbut when you just need to update  that one file  it gets a little... overkill.\nTo solve this problem, you can use the  rebuild  command to compile a single file. \n  Requires the following Arguments:  \n  path   The relative file path\n  \n  Example:  \n  php hyde rebuild _posts\/hello-world.md\n  \n Start the realtime compiler. \n  php hyde serve          \n  \n The serve command feels similar to the Laravel Artisan serve command, but works by\nstarting a local PHP server. When you visit a page, the server will use the\nrealtime compiler to locate the source file, recompile it, and proxy\nthe resulting HTML and any media files to your browser. \n If you are missing the extension, you can always reinstall it with Composer  composer require hyde\/realtime-compiler .\nYou can also learn more on the  GitHub page . \n  Supports the following options:  \n  --port[=PORT] [default: &quot;8080&quot;]\n--host[=HOST] [default: &quot;localhost&quot;]\n  \n Scaffold a new blog post file \n  php hyde make:post       \n  \n At the core, blog posts are just pain ol' Markdown files.\nHowever, by adding a special YAML syntax called Front Matter, you can add metadata to your posts.\nBut who can remember the syntax? You can use the  make:post  command to scaffold a new blog post file.\nThe command will ask you a series of interactive questions, letting you fill in the blanks.\nIt will then create a file, converting your input into front matter. It automatically\nsets the date and time for you, and the file name will be based on the title. \n Scaffold a new page file \n  php hyde make:page &lt;title&gt; [--type=TYPE]\n  \n The  make:page  command is similar to the  make:post  command and lets you quickly\ncreate one of the following page types: \n \n \n Markdown :\nCreates a Markdown file in the  _pages  directory. \n \n Blade :\nCreates a Blade file using the app layout in the  _pages  directory. \n \n Docs :\nCreates a Markdown file in the  _docs  directory. \n \n In all cases, the title will be used in the created file as the page title, and to generate the filename. \n  Requires the following Arguments:  \n  title   The name of the page file to create\n  \n  Supports the following options:  \n  --type[=TYPE] The type of page to create (markdown, blade, or docs) [default: &quot;markdown&quot;]\n  \n  Example:  \n  php hyde make:page About # Defaults to Markdown\nphp hyde make:page &quot;Photo Gallery&quot; --type=blade\nphp hyde make:page &quot;Hyde CLI Guide&quot; --type=docs\n  \n \n Tip: You can also use the shorthand  --blade  or  --docs  instead of  --type=blade  or  --type=docs . \n \n \n Tip: You can also tell Hyde to place the file in a subdirectory by specifying it before the title, just separate them with a slash. For example:  php hyde make:page &quot;getting-started\/installation&quot; --type=&quot;docs&quot;  \n \n Publish a default homepage \n  php hyde publish:homepage [&lt;name&gt;]\n  \n Hyde comes with three homepage options to choose from. The homepage you select is stored as\n _pages\/index.blade.php  and becomes the  index.html  file when compiling the site. \n On a fresh install the page 'welcome' is installed.\nHowever, you can use this command to publish another one.\nIf you have modified the file, you will need to supply the --force option to overwrite it. \n The available homepages are: \n \n \n welcome:  The default welcome page. Unlike the other pages, the styles are defined inline. \n \n posts:  A Blade feed of your latest blog posts. Perfect for a blog site! \n \n blank:  A blank Blade template with just the base app layout. \n \n You can supply the homepage name directly to the command, otherwise you will be prompted to select one. \n Publish the Hyde Blade views \n  php hyde publish:views [&lt;category&gt;]\n  \n Since Hyde is based on the Laravel view system the compiler uses Blade views and components.\nLaravel actually registers two locations for the Hyde views: your site's  resources\/views\/vendor\/hyde  directory and the  resources  directory located in the Framework package. \n \n Warning: This command will overwrite any existing files in the  resources\/views\/vendor  directory.  \nYou should be sure to have backups, or version control such as Git, before running this command. \n \n So, when compiling a site, Laravel will first check if a custom version of the view has been placed in the  resources\/views\/vendor\/hyde  directory by the developer (you). Then, if the view has not been customized, Laravel will search the Hyde framework view directory. This makes it easy for you to customize \/ override the package's views. \n The available views you can publish are: \n \n \n all:  Publish all categories listed below \n \n layouts:  Global layout views, such as the app layout, navigation menu, and Markdown page templates. \n \n components:  More or less self-contained components, extracted for customizability and DRY code. \n \n 404:  A beautiful 404 error page by the Laravel Collective. This file is already published by default. \n \n You can supply the category name directly to the command, otherwise you will be prompted to select one. \n \nNote that when a view is updated in the framework you will need to republish the views to get the new changes!\n \n Republish the configuration files \n  php hyde update:configs   \n  \n When updating Hyde to a new version (or if you mess up your config files),\nyou can use this command to republish the configuration files. \n \n Warning: This command will overwrite any existing files in the  config  directory.  \nYou should be sure to have backups, or version control such as Git, before running this command. \n \n Run validation tests to optimize your site \n  php hyde validate        \n  \n Hyde ships with a very useful command that runs a series of checks to validate your setup and catch any potential issues.","destination":"console-commands.html"},{"slug":"quickstart","title":"Quickstart Guide","content":"Quickstart Guide \n Installing HydePHP using Composer \n The recommended method of installing Hyde is using Composer. \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\ncomposer create-project hyde\/hyde --stability=dev\n  \n Requirements \n \n These requirements are for your local development environment. \n \n Hyde is based on  Laravel 9 \nwhich requires a minimum PHP version of 8.0.\nYou should also have  Composer  installed. \n To use some features like  compiling your own assets \nyou also need NodeJS and NPM. \n Using the Hyde CLI \n The main way to interact with Hyde is through HydeCLI. \n If you are familiar with Laravel Artisan you will feel right at home. \n Learn more about the HydeCLI in the  console commands  documentation. \n Starting a development server \n To make previewing your site a breeze you can use the real-time compiler\nwhich builds your pages on the fly. Start it using the HydeCLI: \n  php hyde serve\n  \n Creating content \n Directory structure \n Creating content with Hyde is easy. Simply place Markdown files in one of the source directories, which are as follows: \n  \/\/ torchlight! {&quot;lineNumbers&quot;: false}\n\u251c\u2500\u2500 _docs  \/\/ For documentation pages              \n\u251c\u2500\u2500 _posts \/\/ For blog posts\n\u2514\u2500\u2500 _pages \/\/ For static Markdown and Blade pages\n  \n \n There are a few more directories that you should know about. Please see the\n directory structure  section. \n \n Scaffolding files \n You can scaffold blog post files using the  php hyde make:post  command with automatically creates the front matter based on your input selections. \n You can also scaffold pages with the  php hyde make:page  command. \n  php hyde make:page &quot;Page Title&quot; # Markdown is the default page type\nphp hyde make:page --type=blade # Creates a file extending the default layout\nphp hyde make:page --type=docs  # Quickly creates a documentation page\n  \n Autodiscovery \n When building the site, Hyde will your source directories for files and\ncompile them into static HTML using the appropriate layout depending\non what kind of page it is. You don't have to worry about routing\nas Hyde takes care of that, including creating navigation menus! \n Compiling to static HTML \n Now that you have some amazing content, you'll want to compile your site into static HTML. \n This is as easy as executing the  build  command: \n  php hyde build\n  \n  Your site is then stored in the  _site  directory.  \n Managing assets \n Hyde comes bundled with a precompiled and minified  app.css  containing all the Tailwind you need for the default views meaning that you don't even need to use NPM. However, Hyde is already configured to use Laravel Mix to compile your assets if you feel like there's a need to. See more on the  Managing Assets  page. \n Deploying your site \n You are now ready to show your site to the world! \n Simply copy the  _site  directory to your web server's document root, and you're ready to go. \n You can even use GitHub pages to host your site for free. That's what the Hyde website does,\nusing a CI that automatically builds and deploys this site. \n Further reading \n Here's some ideas of what to read next: \n \n \n Architecture Concepts &amp; Directory Structure \n \n \n Console Commands with the HydeCLI \n \n \n Creating Blog Posts","destination":"quickstart.html"},{"slug":"directory-structure","title":"Redirects\/Directory Structure","content":"Redirecting you to  architecture-concepts#directory-structure","destination":"directory-structure.html"},{"slug":"getting-started","title":"Redirects\/Getting Started","content":"Redirecting you to  quickstart","destination":"getting-started.html"},{"slug":"installation","title":"Redirects\/installation","content":"Redirecting you to  quickstart","destination":"installation.html"}]
